<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>DepleteAmmo</title>
  <ns>0</ns>
  <id>9730</id>
  <revision>
    <id>52744</id>
    <parentid>52743</parentid>
    <timestamp>2024-06-06T13:37:18Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <comment>/* Parameters */</comment>
    <origin>52744</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="5371" sha1="kdad3l0v7xf1whddvd5bo6de6203swc" xml:space="preserve">'''[[Classes:Weapon|Weapon]]'''

virtual bool '''DepleteAmmo'''(bool ''altFire'', bool ''checkEnough'' = true, int ''ammouse'' = -1, bool ''forceammouse'' = false)

==Usage==
A [[Weapon]] virtual function that consumes the weapon's ammo. The type of ammo is determined by the {{property|Weapon.AmmoType1}}/{{property|Weapon.AmmoType2}} properties. This should be used instead of [[A_TakeInventory]] when manual control over ammo consumption is needed. Can be bother overridden to modify the base ammo consumption behavior, and called directly to manually check for and consume ammo. Returns true if the user has enough ammo to fire.

Despite being a weapon function, this is ''not'' an [[ZScript_functions#Action|action function]]. As such, if this is called from inside an action function or a weapon state handled by a PSprite (i.e. any state outside of the ones in the Spawn sequence), it needs an &lt;code&gt;invoker.&lt;/code&gt; prefix.

For checking for ammo without consuming it, see '''[[CheckAmmo]]'''.

===Parameters===
*{{c|bool '''altFire'''}}
:Determines if {{property|Weapon.AmmoType1|primary}} or {{property|Weapon.AmmoType2|secondary}} ammo should be consumed. Normally you would pass &lt;code&gt;invoker.bAltFire&lt;/code&gt; to this, which is a weapon flag that automatically gets set to true when the weapon is using a secondary attack (i.e. the player used {{c|BT_ALTATTACK}} button to initiate the AltFire sequence). Passing &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; instead allows for manual control.
*{{c|bool '''checkEnough'''}}
:If &lt;code&gt;true&lt;/code&gt;, the function will first ''check'' if the user has enough ammo (in accordance either with the [[Actor properties#Weapon.AmmoType1|AmmoType1]]/[[Actor properties#Weapon.AmmoType2|AmmoType2]] property, or the {{c|ammouse}} argument if that's not &lt;code&gt;-1&lt;/code&gt;). If this is &lt;code&gt;true&lt;/code&gt; and the user doesn't have enough ammo, the function returns &lt;code&gt;false&lt;/code&gt;.
:If &lt;code&gt;false&lt;/code&gt;, the function will try to consume ammo even if the user doesn't have enough, and will always return &lt;code&gt;true&lt;/code&gt; at the end (see [[#Return values|Return values]]).
*{{c|int '''ammouse'''}}
:Determines how much ammo the user should have for the check to pass successfully. At the default value (-1) this will check the value of the {{property|Weapon.AmmoUse1}}/{{property|Weapon.AmmoUse2}} property (whichever is relevant based on the value of &lt;code&gt;altFire&lt;/code&gt;). If this parameter is greater than zero ''and'' &lt;code&gt;forceammouse&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, this value will be used in the check instead.
*{{c|bool '''forceammouse'''}}
:Ignores [[Classes:PowerInfiniteAmmo|infinite ammo effects]] and forcefully checks if the user actually has enough ammo. Also allows passing a custom value to &lt;code&gt;ammouse&lt;/code&gt;.

===Return values===
* bool - returns &lt;code&gt;true&lt;/code&gt; if the owner of the weapon has enough ammo to fire. This is ''only'' done if the &lt;code&gt;checkEnough&lt;/code&gt; argument was set to &lt;code&gt;true&lt;/code&gt;; otherwise the function tries to consume ammo and ''always'' returns &lt;code&gt;true&lt;/code&gt; even if there wasn't enough ammo.

== [[ZScript]] definition ==
{{ZScriptDefinitionNote|actors/inventory/weapons.zs#L1017}}
The base Weapon class defines it as follows:
&lt;syntaxhighlight lang="csharp"&gt;
	virtual bool DepleteAmmo(bool altFire, bool checkEnough = true, int ammouse = -1, bool forceammouse = false)
	{
		if (!(sv_infiniteammo || (Owner.FindInventory ('PowerInfiniteAmmo', true) != null)))
		{
			if (checkEnough &amp;&amp; !CheckAmmo (altFire ? AltFire : PrimaryFire, false, false, ammouse))
			{
				return false;
			}
			if (!altFire)
			{
				if (Ammo1 != null)
				{
					if (ammouse &gt;= 0 &amp;&amp; (bDehAmmo || forceammouse))
					{
						Ammo1.Amount -= ammouse;
					}
					else
					{
						Ammo1.Amount -= AmmoUse1;
					}
				}
				if (bPRIMARY_USES_BOTH &amp;&amp; Ammo2 != null)
				{
					Ammo2.Amount -= AmmoUse2;
				}
			}
			else
			{
				if (Ammo2 != null)
				{
					Ammo2.Amount -= AmmoUse2;
				}
				if (bALT_USES_BOTH &amp;&amp; Ammo1 != null)
				{
					Ammo1.Amount -= AmmoUse1;
				}
			}
			if (Ammo1 != null &amp;&amp; Ammo1.Amount &lt; 0)
				Ammo1.Amount = 0;
			if (Ammo2 != null &amp;&amp; Ammo2.Amount &lt; 0)
				Ammo2.Amount = 0;
		}
		return true;
	}&lt;/syntaxhighlight&gt;

==Examples==
&lt;syntaxhighlight lang="csharp"&gt;
class PlasmaShotgun : Shotgun
{
	States
	{
	Fire:
		SHTG A 3;
		SHTG A 7 
		{
			// Consume 1 shell:
			invoker.DepleteAmmo(invoker.bAltFire, true);
			A_GunFlash();
			// Fire 8 plasmaballs:
			for (int i = 8; i &gt; 0; i--)
			{
				A_FireProjectile("Plasmaball", angle: frandom(-5.6, 5.6), useammo: false);
			}
		}
		SHTG BC 5;
		SHTG D 4;
		SHTG CB 5;
		SHTG A 3;
		SHTG A 7 A_ReFire;
		Goto Ready;
	}
}&lt;/syntaxhighlight&gt;

Alternatively, this can also be packed into a custom function:
&lt;syntaxhighlight lang="csharp"&gt;
class PlasmaShotgun : Shotgun
{
	action void A_FirePlasmaShotgun()
	{
		// Consume ammo and return if there isn't enough
		// of it:
		if (!invoker.DepleteAmmo(invoker.bAltFire, true))
		{
			return;
		}
		A_GunFlash();
		// Fire 8 plasmaballs:
		for (int i = 8; i &gt; 0; i--)
		{
			A_FireProjectile("Plasmaball", angle: frandom(-5.6, 5.6), useammo: false);
		}
	}

	States
	{
	Fire:
		SHTG A 3;
		SHTG A 7 A_FirePlasmaShotgun();
		SHTG BC 5;
		SHTG D 4;
		SHTG CB 5;
		SHTG A 3;
		SHTG A 7 A_ReFire;
		Goto Ready;
	}
}&lt;/syntaxhighlight&gt;


[[Category:ZScript]]
[[Category:Weapon]]</text>
    <sha1>kdad3l0v7xf1whddvd5bo6de6203swc</sha1>
  </revision>
</page>