<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>Classes:Actor</title>
  <ns>0</ns>
  <id>4743</id>
  <revision>
    <id>53200</id>
    <parentid>50860</parentid>
    <timestamp>2024-10-03T11:27:11Z</timestamp>
    <contributor>
      <username>Blue Shadow</username>
      <id>2021</id>
    </contributor>
    <minor />
    <comment>/* DECORATE Actor fields */ {{prettytable}}</comment>
    <origin>53200</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="33809" sha1="25q3u3i9jczbdeondoed6sxod7e2ca0" xml:space="preserve">{{actor|
| type = Internal
| name = Actor
| class = Actor
}}[[Classes]]: &lt;u&gt;Actor&lt;/u&gt;&lt;br&gt;
&amp;ensp;&amp;rarr;[[Hierarchical class list|All other classes]]&lt;br&gt;

Actor (internally AActor) is the base class for all DECORATE actors. When a parent class isn't declared in an actor definition, it uses Actor as the parent.

Actor contains and defines all the code to manage map objects such as decorations, monsters, powerups, players, and many more. It itself is derived from Thinker (internally DThinker), which is the parent class for practically everything physically in the game world that performs special actions -- for example, a door or a crushing ceiling is a Thinker too, but not an Actor. Thinker itself is derived from Object (internally DObject) which is the base class for absolutely everything in the game world. Even an ACS script is an Object.

Most [[action functions]] are native to Actor, which means that they are available to all actors (since all actors are derived from Actor). A native action is only available to the actor that declares it, and its inherited actors. Actor and [[Classes:Inventory|Inventory]] have therefore an impressive quantity of native codepointers.

== [[DECORATE]] Actor fields ==
Actors have a number of special variables. Some can be seen from DECORATE code through [[DECORATE variables]], but have some others as well. The most important are the &lt;tt&gt;master&lt;/tt&gt;, &lt;tt&gt;target&lt;/tt&gt; and &lt;tt&gt;tracer&lt;/tt&gt; pointers. Their significations have varying meanings depending on the type of actor:
{|{{prettytable}}
!Pointer !! Normal !! Projectile !! Area-affecting
|-
|&lt;tt&gt;master&lt;/tt&gt; || Actor that spawned it || n/a || n/a
|-
|&lt;tt&gt;target&lt;/tt&gt; || Current enemy || Actor that shot it || Actor that is responsible for damage dealt in the area
|-
|&lt;tt&gt;tracer&lt;/tt&gt; || n/a || Enemy at which the actor was shot || n/a
|}
When an actor dies, the &lt;tt&gt;target&lt;/tt&gt; field is automatically set to the actor responsible for killing it. This system, a bit hackish, allows to have the damage from a {{Class|ExplosiveBarrel|barrel}}'s explosion to be credited to the actor that destroyed the barrel, and that from the explosion of a {{Class|Rocket|rocket}} to be credited to the actor that shot it. Some actors have specific uses for the "n/a" fields, for example an {{Class|Archvile|Arch-Vile}} uses the tracer field to keep track of its flames.

Starting with [[ZDoom]] [[Version history#2.6.0|2.6.0]], these fields can be manipulated and accessed, further enhancing their usability.

Other than these pointers and the DECORATE variables, the &lt;tt&gt;reactiontime&lt;/tt&gt; and &lt;tt&gt;threshold&lt;/tt&gt; fields are sometimes used by codepointers. Usually, action functions that change an actor's field are restricted to this actor (and those inheriting from it) to prevent conflicts that could arise between two functions that use the same fields for different purposes.

== Methods ==
=== Action functions ===
See: [[Action functions]]
=== Static ===
{{: Actor static functions}}
=== Virtual ===
{{: Actor virtual functions}}

== [[ZScript]] definition ==
{{note|Due to being overly long, the full definition of the Actor class can be found [https://github.com/ZDoom/gzdoom/blob/e3f8230035f08116d1a62c74aaa78b9c0408df6e/wadsrc/static/zscript/actors/actor.zs#L77 on GZDoom Github]}}

=== [[DECORATE]] definition ===
{{DecorateDefinitionNote}}
 ACTOR &lt;u&gt;Actor&lt;/u&gt; native //: Thinker
 {
   {{Property|Scale}} 1
   {{Property|Health}} 1000
   {{Property|ReactionTime}} 8
   {{Property|Radius}} 20
   {{Property|Height}} 16
   {{Property|Mass}} 100
   {{Property|RenderStyle}} Normal
   {{Property|Alpha}} 1
   {{Property|MinMissileChance}} 200
   {{Property|MeleeRange}} 44
   {{Property|MaxDropoffHeight}} 24
   {{Property|MaxStepHeight}} 24
   {{Property|BounceFactor}} 0.7
   {{Property|WallBounceFactor}} 0.75
   {{Property|BounceCount}} -1
   {{Property|FloatSpeed}} 4
   {{Property|FloatBobPhase}} -1 // randomly initialize by default
   {{Property|Gravity}} 1
   {{Property|DamageFactor}} 1.0
   {{Property|PushFactor}} 0.25
   {{Property|WeaveIndexXY}} 0
   {{Property|WeaveIndexZ}} 16
   {{Property|DesignatedTeam}} 255
   {{Property|PainType}} {{DamageType|Normal}}
   {{Property|DeathType}} {{DamageType|Normal}}
   {{Property|TeleFogSourceType}} "{{Class|TeleportFog}}"
   {{Property|TeleFogDestType}} "{{Class|TeleportFog}}"
   {{Property|RipperLevel}} 0
   {{Property|RipLevelMin}} 0
   {{Property|RipLevelMax}} 0
   {{Property|DefThreshold}} 100
   {{Property|BloodType}} "{{Class|Blood}}", "{{Class|BloodSplatter}}", "{{Class|AxeBlood}}"
   {{Property|ExplosionDamage}} 128
   {{Property|MissileHeight}} 32
   {{Property|SpriteAngle}} 0
   {{Property|SpriteRotation}} 0
   {{Property|StencilColor}} "00 00 00"
   {{Property|VisibleAngles}} 0, 0
   {{Property|VisiblePitch}} 0, 0
 
   // Functions
   native bool [[CheckClass]](class&lt;Actor&gt; checkclass, int ptr_select = {{const|AAPTR_DEFAULT}}, bool match_superclass = {{const|false}});
   native int [[CountInv]](class&lt;Inventory&gt; itemtype, int ptr_select = {{const|AAPTR_DEFAULT}});
   native int [[CountProximity]](class&lt;Actor&gt; classname, float distance, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   native float [[GetAngle]](int flags, int ptr = {{const|AAPTR_DEFAULT}});
   native float [[GetCrouchFactor]](int ptr = {{const|AAPTR_PLAYER1}});
   native float [[GetCVar]](string cvar);
   native float [[GetDistance]](bool checkz, int ptr = {{const|AAPTR_DEFAULT}});
   native int [[GetGibHealth]]();
   native int [[GetMissileDamage]](int mask, int add, int ptr = {{const|AAPTR_DEFAULT}});
   native int [[GetPlayerInput]](int inputnum, int ptr = {{const|AAPTR_DEFAULT}});
   native int [[GetSpawnHealth]]();
   native float [[GetSpriteAngle]](int ptr = {{const|AAPTR_DEFAULT}});
   native float [[GetSpriteRotation]](int ptr = {{const|AAPTR_DEFAULT}});
   native float [[GetZAt]](float px = 0, float py = 0, float angle = 0, int flags = 0, int pick_pointer = {{const|AAPTR_DEFAULT}});
   native bool [[IsPointerEqual]](int ptr_select1, int ptr_select2);
   action native int [[OverlayID]]();
   action native float [[OverlayX]](int layer = 0);
   action native float [[OverlayY]](int layer = 0);
 
   // Action functions
   action native [[A_ActiveAndUnblock]]();
   action native [[A_ActiveSound]]();
   action native [[A_AlertMonsters]](float maxdist = 0, int flags = 0);
   action native [[A_BabyMetal]]();
   action native [[A_Bang4Cloud]]();
   action native [[A_BarrelDestroy]]();
   native void [[A_BasicAttack]](int meleedamage, sound meleesound, class&lt;actor&gt; missiletype, float missileheight);
   action native [[A_BetaSkullAttack]]();
   action native [[A_BFGSpray]](class&lt;Actor&gt; spraytype = "{{Class|BFGExtra}}", int numrays = 40, int damagecount = 15, float angle = 90,
                            float distance = 16*64, float vrange = 32, int damage = 0, int flags = 0);
   action native [[A_BishopMissileWeave]]();
   action native [[A_Blast]](int flags = 0, float strength = 255, float radius = 255, float speed = 20, 
                         class&lt;Actor&gt; blasteffect = "{{Class|BlastEffect}}", sound blastsound = "BlastRadius");
   action native [[A_BossDeath]]();
   action native [[A_BrainAwake]]();
   action native [[A_BrainDie]]();
   action native [[A_BrainExplode]]();
   action native [[A_BrainPain]]();
   action native [[A_BrainScream]]();
   action native [[A_BrainSpit]](class&lt;Actor&gt; spawntype = "none");   // needs special treatment for default
   action native [[A_BruisAttack]]();
   action native [[A_BspiAttack]]();
   action native [[A_BulletAttack]]();
   native void [[A_Burst]](class&lt;Actor&gt; chunktype);
   native bool [[A_CallSpecial]](int special, int arg1=0, int arg2=0, int arg3=0, int arg4=0, int arg5=0);
   action native [[A_CentaurDefend]]();
   native void [[A_ChangeFlag]](string flagname, bool value);
   action native [[A_ChangeVelocity]](float x = 0, float y = 0, float z = 0, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_Chase]](state melee = "*", state missile = "none", int flags = 0);
   native state [[A_CheckBlock]](state block, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}}, float xofs = 0, float yofs = 0,
                                    float zofs = 0, float angle = 0);
   native state [[A_CheckCeiling]](state label);
   native state [[A_CheckFlag]](string flagname, state label, int check_pointer = {{const|AAPTR_DEFAULT}});
   native state [[A_CheckFloor]](state label);
   native state [[A_CheckLOF]](state jump, int flags = 0, float range = 0, float minrange = 0, float angle = 0,
                                  float pitch = 0, float offsetheight = 0, float offsetwidth = 0,
                                  int ptr_target = {{Const|AAPTR_DEFAULT}}, float offsetforward = 0);
   action native [[A_CheckPlayerDone]]();
   native state [[A_CheckProximity]](state jump, class&lt;Actor&gt; classname, float distance, int count = 1, int flags = 0,
                                        int ptr = {{const|AAPTR_DEFAULT}});
   native state [[A_CheckRange]](float distance, state label, bool two_dimension = false);
   native state [[A_CheckSight]](state label);
   native state [[A_CheckSightOrRange]](float distance, state label, bool two_dimension = false);
   native state [[A_CheckSpecies]](state jump, name species = "", int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_CheckTerrain]]();
   action native [[A_ClassBossHealth]]();
   action native [[A_ClearLastHeard]]();
   action native int [[A_ClearOverlays]](int sstart = 0, int sstop = 0, bool safety = {{const|true}});
   action native [[A_ClearShadow]]();
   action native [[A_ClearSoundTarget]]();
   action native [[A_ClearTarget]]();
   action native [[A_ComboAttack]]();
   action native [[A_CopyFriendliness]](int ptr_source = {{const|AAPTR_MASTER}});
   action native bool [[A_CopySpriteFrame]](int from, int to, int flags = 0);
   action native [[A_Countdown]]();
   native void [[A_CountdownArg]](int argnum, state targstate = "");
   action native [[A_CPosAttack]]();
   action native [[A_CPosRefire]]();
   action native [[A_CStaffMissileSlither]]();
   native void [[A_CustomBulletAttack]](float spread_xy, float spread_z, int   numbullets, int damageperbullet, 
                                    class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", float range = 0, int flags = 0,
                                    int ptr = {{const|AAPTR_TARGET}}, class&lt;Actor&gt; missile = "", float Spawnheight = 32,
                                    float Spawnofs_xy = 0);
   native void [[A_CustomComboAttack]](class&lt;Actor&gt; missiletype, float spawnheight, int damage, sound meleesound = "", 
                                     name damagetype = "none", bool bleed = true);
   action native [[A_CustomMeleeAttack]](int damage = 0, sound meleesound = "", sound misssound = "", 
                                     name damagetype = "none", bool bleed = true);
   native void [[A_CustomMissile]](class&lt;Actor&gt; missiletype, float spawnheight = 32, float spawnofs_xy = 0,
                                 float angle = 0, int flags = 0, float pitch = 0, int ptr = {{const|AAPTR_TARGET}});
   native void [[A_CustomRailgun]](int damage, int spawnofs_xy = 0, color color1 = "", color color2 = "", int flags = 0, 
                                 int aim = 0, float maxdiff = 0, class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}",
                                 float spread_xy = 0, float spread_z = 0, float range = 0, int duration = 0,
                                 float sparsity = 1.0, float driftspeed = 1.0, class&lt;Actor&gt; spawnclass = "none", 
                                 float spawnofs_z = 0, int spiraloffset = 270, int limit = 0);
   action native [[A_CyberAttack]]();
   native void [[A_DamageChildren]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None",
                                  name species = "None", int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   native void [[A_DamageMaster]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None",
                                name species = "None", int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   native void [[A_DamageSelf]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                              int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   native void [[A_DamageSiblings]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None",
                                  name species = "None", int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   native void [[A_DamageTarget]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None",
                                name species = "None", int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   native void [[A_DamageTracer]](int amount, name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None",
                                name species = "None", int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_DeQueueCorpse]]();
   action native [[A_Detonate]]();
   action native [[A_Die]](name damagetype = "{{DamageType|none}}");
   action native [[A_DropFire]]();
   native void [[A_DropInventory]](class&lt;Inventory&gt; itemtype);
   native void [[A_DropItem]](class&lt;Actor&gt; item, int dropamount = -1, int chance = 256);
   native void [[A_DropWeaponPieces]](class&lt;Actor&gt; p1, class&lt;Actor&gt; p2, class&lt;Actor&gt; p3);
   action native [[A_DualPainAttack]](class&lt;Actor&gt; spawntype = "{{Class|LostSoul}}");
   action native int [[A_Explode]](int damage = -1, int distance = -1, int flags = {{const|XF_HURTSOURCE}}, bool alert = false,
                           int fulldamagedistance = 0, int nails = 0, int naildamage = 10,
                           class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", name damagetype = "{{DamageType|none}}");
   native void [[A_ExtChase]](bool usemelee, bool usemissile, bool playactive = true, bool nightmarefast = false);
   action native [[A_FaceConsolePlayer]](float MaxTurnAngle = 0); // [TP] no-op
   action native [[A_FaceMaster]](float max_turn = 0, float max_pitch = 270, float ang_offset = 0, float pitch_offset = 0,
                              int flags = 0, float z_ofs = 0);
   action native bool [[A_FaceMovementDirection]](float offset = 0, float anglelimit = 0, float pitchlimit = 0, int flags = 0,
                                              int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_FaceTarget]](float max_turn = 0, float max_pitch = 270, float ang_offset = 0, float pitch_offset = 0,
                              int flags = 0, float z_ofs = 0);
   action native [[A_FaceTracer]](float max_turn = 0, float max_pitch = 270, float ang_offset = 0, float pitch_offset = 0,
                              int flags = 0, float z_ofs = 0);
   action native [[A_FadeIn]](float reduce = 0.1, int flags = 0);
   action native [[A_FadeOut]](float reduce = 0.1, int flags = 1);
   native void [[A_FadeTo]](float target, float amount = 0.1, int flags = 0);
   action native [[A_Fall]]();
   action native [[A_FastChase]]();
   action native [[A_FatAttack1]](class&lt;Actor&gt; spawntype = "{{Class|FatShot}}");
   action native [[A_FatAttack2]](class&lt;Actor&gt; spawntype = "{{Class|FatShot}}");
   action native [[A_FatAttack3]](class&lt;Actor&gt; spawntype = "{{Class|FatShot}}");
   action native [[A_FatRaise]]();
   action native [[A_Feathers]]();
   action native [[A_Fire]](float spawnheight = 0);
   action native [[A_FireAssaultGun]]();
   action native [[A_FireCrackle]]();
   action native [[A_FLoopActiveSound]]();
   action native [[A_FreezeDeath]]();
   action native [[A_FreezeDeathChunks]]();
   action native [[A_GenericFreezeDeath]]();
   action native [[A_GetHurt]]();
   native bool [[A_GiveInventory]](class&lt;Inventory&gt; itemtype, int amount = 0, int giveto = {{const|AAPTR_DEFAULT}});
   native void [[A_GiveQuestItem]](int itemno);
   native int [[A_GiveToChildren]](class&lt;Inventory&gt; itemtype, int amount = 0);
   native int [[A_GiveToSiblings]](class&lt;Inventory&gt; itemtype, int amount = 0);
   native bool [[A_GiveToTarget]](class&lt;Inventory&gt; itemtype, int amount = 0, int forward_ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_Gravity]]();
   action native [[A_HeadAttack]]();
   action native [[A_HideThing]]();
   action native [[A_Hoof]]();
   action native [[A_IceGuyDie]]();
   native state [[A_Jump]](int chance = 256, state label, ...);
   native state [[A_JumpIf]](bool expression, state label);
   native state [[A_JumpIfArmorType]](name Type, state label, int amount = 1);
   native state [[A_JumpIfCloser]](float distance, state label, bool noz = {{const|false}});
   native state [[A_JumpIfHealthLower]](int health, state label, int ptr_selector = {{const|AAPTR_DEFAULT}});
   native state [[A_JumpIfHigherOrLower]](state high, state low, float offsethigh = 0, float offsetlow = 0, bool includeHeight = {{const|true}},
                                             int ptr = {{const|AAPTR_TARGET}});
   native state [[A_JumpIfInTargetInventory]](class&lt;Inventory&gt; itemtype, int amount, state label,
                                                 int forward_ptr = {{const|AAPTR_DEFAULT}});
   native state [[A_JumpIfInTargetLOS]](state label, float fov = 0, int flags = 0, float dist_max = 0,
                                           float dist_close = 0);
   native state [[A_JumpIfInventory]](class&lt;Inventory&gt; itemtype, int itemamount, state label,
                                         int owner = {{const|AAPTR_DEFAULT}});
   native state [[A_JumpIfMasterCloser]](float distance, state label, bool noz = {{const|false}});
   native state [[A_JumpIfTargetInLOS]](state label, float fov = 0, int flags = 0, float dist_max = 0,
                                           float dist_close = 0);
   native state [[A_JumpIfTargetInsideMeleeRange]](state label);
   native state [[A_JumpIfTargetOutsideMeleeRange]](state label);
   native state [[A_JumpIfTracerCloser]](float distance, state label, bool noz = {{const|false}});
   action native [[A_KeenDie]](int doortag = 666);
   action native [[A_KillChildren]](name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                                  int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_KillMaster]](name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                                int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_KillSiblings]](name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                                  int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_KillTarget]](name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                                int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_KillTracer]](name damagetype = "{{DamageType|none}}", int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None",
                                int src = {{const|AAPTR_DEFAULT}}, int inflict = {{const|AAPTR_DEFAULT}});
   action native [[A_KlaxonBlare]]();
   action native bool [[A_LineEffect]](int boomspecial = 0, int tag = 0);
   native void [[A_Log]](string whattoprint);
   native void [[A_LogFloat]](float whattoprint);
   native void [[A_LogInt]](int whattoprint);
   action native [[A_Look]]();
   action native [[A_Look2]]();
   action native [[A_LookEx]](int flags = 0, float minseedist = 0, float maxseedist = 0, float maxheardist = 0, 
                          float fov = 0, state label = "");
   action native [[A_LoopActiveSound]]();
   action native [[A_LowGravity]]();
   action native [[A_M_Saw]](sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2,
                         class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}");
   action native [[A_MeleeAttack]]();
   action native [[A_Metal]]();
   action native [[A_MissileAttack]]();
   action native [[A_MonsterRail]]();
   native state [[A_MonsterRefire]](int chance, state label);
   action native [[A_Mushroom]](class&lt;Actor&gt; spawntype = "{{Class|FatShot}}", int numspawns = 0, int flags = 0,
                            float vrange = 4.0, float hrange = 0.5);
   action native [[A_NoBlocking]]();
   action native [[A_NoGravity]]();
   action native bool [[A_Overlay]](int layer, state start = "", bool nooverride = {{const|false}});
   action native [[A_OverlayFlags]](int layer, int flags, bool set);
   action native [[A_OverlayOffset]](int layer = {{const|PSP_WEAPON}}, float wx = 0, float wy = 32, int flags = 0);
   action native [[A_Pain]]();
   action native [[A_PainAttack]](class&lt;Actor&gt; spawntype = "{{Class|LostSoul}}", float angle = 0, int flags = 0, int limit = -1);
   action native [[A_PainDie]](class&lt;Actor&gt; spawntype = "{{Class|LostSoul}}");
   action native [[A_PigPain]] ();
   action native [[A_PlayerScream]]();
   native state [[A_PlayerSkinCheck]](state label);
   action native [[A_PlaySound]](sound whattoplay = "weapons/pistol", int slot = {{const|CHAN_BODY}}, float volume = 1.0,
                             bool looping = false, float attenuation = {{const|ATTN_NORM}});
   native void [[A_PlaySoundEx]](sound whattoplay, coerce name slot, bool looping = false, int attenuation = 0);
   native void [[A_PlayWeaponSound]](sound whattoplay);
   action native [[A_PosAttack]]();
   native void [[A_Print]](string whattoprint, float time = 0, name fontname = "");
   native void [[A_PrintBold]](string whattoprint, float time = 0, name fontname = "");
   action native [[A_Punch]]();
   native void [[A_Quake]](int intensity, int duration, int damrad, int tremrad, sound sfx = "world/quake");
   native void [[A_QuakeEx]](int intensityX, int intensityY, int intensityZ, int duration, int damrad, int tremrad,
                           sound sfx = "world/quake", int flags = 0, float mulWaveX = 1, float mulWaveY = 1, float mulWaveZ = 1,
                           int falloff = 0, int highpoint = 0, float rollIntensity = 0, float rollWave = 0);
   action native [[A_QueueCorpse]]();
   action native [[A_RadiusDamageSelf]](int damage = 128, float distance = 128, int flags = 0, class&lt;Actor&gt; flashtype = "None");
   native int [[A_RadiusGive]](class&lt;Inventory&gt; itemtype, float distance, int flags, int amount = 0, class&lt;Actor&gt; filter = "None",
                              name species = "None", float mindist = 0, int limit = 0);
   action native [[A_RadiusThrust]](int force = 128, int distance = -1, int flags = {{const|RTF_AFFECTSOURCE}}, int fullthrustdistance = 0);
   action native [[A_RaiseChildren]](bool copy = 0);
   action native [[A_RaiseMaster]](bool copy = 0);
   action native [[A_RaiseSiblings]](bool copy = 0);
   native void [[A_RearrangePointers]](int newtarget, int newmaster = {{const|AAPTR_DEFAULT}}, 
                                     int newtracer = {{const|AAPTR_DEFAULT}}, int flags=0);
   native void [[A_Recoil]](float xyvel);
   action native [[A_RemoveChildren]](bool removeall = false, int flags = , class&lt;Actor&gt; filter = "None", name species = "None");
   action native [[A_RemoveForcefield]]();
   action native [[A_RemoveMaster]] (int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None");
   action native [[A_RemoveSiblings]](bool removeall = false, int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None");
   action native [[A_RemoveTarget]](int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None");
   action native [[A_RemoveTracer]](int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None");
   native void [[A_Remove]](int removee, int flags = 0, class&lt;Actor&gt; filter = "None", name species = "None");
   action native [[A_ResetHealth]](int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_Respawn]](int flags = 1);
   action native [[A_RocketInFlight]]();
   action native [[A_SargAttack]]();
   native void [[A_ScaleVelocity]](float scale, int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_Scream]]();
   action native [[A_ScreamAndUnblock]]();
   native void [[A_SeekerMissile]](int threshold, int turnmax, int flags = 0, int chance = 50, int distance = 10);
   native bool [[A_SelectWeapon]](class&lt;Weapon&gt; whichweapon, int flags = 0);
   action native [[A_SentinelBob]]();
   action native [[A_SentinelRefire]]();
   action native [[A_SetAngle]](float angle = 0, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetArg]](int pos, int value);
   native void [[A_SetBlend]](color color1, float alpha, int tics, color color2 = "");
   native void [[A_SetChaseThreshold]](int threshold, bool def = {{const|false}}, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetDamageType]](name damagetype);
   action native [[A_SetFloat]]();
   native void [[A_SetFloatBobPhase]](int bob);
   native void [[A_SetFloatSpeed]](float speed, int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_SetFloorClip]]();
   native void [[A_SetGravity]](float gravity);
   native void [[A_SetHealth]](int health, int ptr = {{const|AAPTR_DEFAULT}});
   action native bool [[A_SetInventory]](class&lt;Inventory&gt; itemtype, int amount, int ptr = {{const|AAPTR_DEFAULT}}, bool beyondMax = {{const|false}});
   action native [[A_SetInvulnerable]]();
   native void [[A_SetMass]](int mass);
   native void [[A_SetPainThreshold]](int threshold, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetPitch]](float pitch, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_SetReflective]]();
   action native [[A_SetReflectiveInvulnerable]]();
   native void [[A_SetRenderStyle]](float alpha, int style);
   native void [[A_SetRipperLevel]](int level);
   native void [[A_SetRipMin]](int minimum);
   native void [[A_SetRipMax]](int maximum);
   native void [[A_SetRoll]](float roll, int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetScale]](float scalex, float scaley = 0, int ptr = {{const|AAPTR_DEFAULT}}, bool usezero = {{const|false}});
   action native [[A_SetShadow]]();
   action native [[A_SetShootable]]();
   action native [[A_SetSolid]]();
   native void [[A_SetSpecial]](int spec, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0);
   native void [[A_SetSpecies]](name species, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetSpeed]](float speed, int ptr = {{const|AAPTR_DEFAULT}});
   action native bool [[A_SetSpriteAngle]](float angle = 0, int ptr = {{const|AAPTR_DEFAULT}});
   action native bool [[A_SetSpriteRotation]](float angle = 0, int ptr = {{const|AAPTR_DEFAULT}});
   native void [[A_SetTeleFog]](class&lt;Actor&gt; oldpos, class&lt;Actor&gt; newpos);
   action native [[A_SetTics]](int tics);
   native void [[A_SetTranslation]](string transname);
   native void [[A_SetTranslucent]](float alpha, int style = 0);
   native void [[A_SetUserArray]](name varname, int index, int value);
   native void [[A_SetUserArrayFloat]](name varname, int index, float value);
   native void [[A_SetUserVar]](name varname, int value);
   native void [[A_SetUserVarFloat]](name varname, float value);
   action native bool [[A_SetVisibleRotation]](float anglestart = 0, float angleend = 0, float pitchstart = 0, float pitchend = 0,
                                           int flags = 0, int ptr = {{const|AAPTR_DEFAULT}});
   action native [[A_ShootGun]]();
   action native [[A_SkelFist]]();
   action native [[A_SkelMissile]]();
   action native [[A_SkelWhoosh]]();
   action native [[A_SkullAttack]](float speed = 20);
   action native [[A_SkullPop]](class&lt;PlayerChunk&gt; skulltype = "{{Class|BloodySkull}}");
   native void [[A_SpawnDebris]](class&lt;Actor&gt; spawntype, bool transfer_translation = false, 
                               float mult_h = 1, float mult_v = 1);
   action native [[A_SpawnFly]](class&lt;Actor&gt; spawntype = "none");   // needs special treatment for default
   action native bool [[A_SpawnItem]](class&lt;Actor&gt; itemtype = "{{Class|Unknown}}", float distance = 0, float zheight = 0,
                                  bool useammo = true, bool transfer_translation = false);
   native bool [[A_SpawnItemEx]](class&lt;Actor&gt; itemtype, float xofs = 0, float yofs = 0, float zofs = 0, float xvel = 0, 
                                    float yvel = 0, float zvel = 0, float angle = 0, int flags = 0, int failchance = 0,
                                    int tid = 0);
   native void [[A_SpawnParticle]](color color1, int flags = 0, int lifetime = 35, float size = 1, float angle = 0, float xoff = 0,
                                 float yoff = 0, float zoff = 0, float velx = 0, float vely = 0, float velz = 0, float accelx = 0,
                                 float accely = 0, float accelz = 0, float startalphaf = 1, float fadestepf = -1, float sizestep = 0);
   action native [[A_SpawnSound]]();
   action native [[A_SpidRefire]]();
   action native [[A_SPosAttack]]();
   action native [[A_SPosAttackUseAtkSound]]();
   action native [[A_StartFire]]();
   action native [[A_Stop]]();
   action native [[A_StopSound]](int slot = {{const|CHAN_VOICE}}); // Bad default but that's what is originally was...
   native void [[A_StopSoundEx]](coerce name slot);
   action native [[A_SwapTeleFog]]();
   native int [[A_TakeFromChildren]](class&lt;Inventory&gt; itemtype, int amount = 0);
   native int [[A_TakeFromSiblings]](class&lt;Inventory&gt; itemtype, int amount = 0);
   native bool [[A_TakeFromTarget]](class&lt;Inventory&gt; itemtype, int amount = 0, int flags = 0, int forward_ptr = {{const|AAPTR_DEFAULT}});
   native bool [[A_TakeInventory]](class&lt;Inventory&gt; itemtype, int amount = 0, int flags = 0, int giveto = {{const|AAPTR_DEFAULT}});
   action native state, bool [[A_Teleport]](state teleportstate = "", class&lt;SpecialSpot&gt; targettype = "{{Class|BossSpot}}",
                                        class&lt;Actor&gt; fogtype = "{{Class|TeleportFog}}", int flags = 0, float mindist = 0, float maxdist = 0,
                                        int ptr = {{const|AAPTR_DEFAULT}});
   action native bool [[A_ThrowGrenade]](class&lt;Actor&gt; itemtype, float zheight = 0, float xyvel = 0, float zvel = 0,
                                     bool useammo = true);
   action native [[A_TossGib]]();
   action native [[A_Tracer]]();
   action native [[A_Tracer2]]();
   native void [[A_TransferPointer]](int ptr_source, int ptr_recipient, int sourcefield, 
                                   int recipientfield={{const|AAPTR_DEFAULT}}, int flags=0);
   action native [[A_TroopAttack]]();
   action native [[A_TurretLook]]();
   action native [[A_Turn]](float angle = 0);
   action native [[A_UnHideThing]]();
   action native [[A_UnsetFloat]]();
   action native [[A_UnSetFloorClip]]();
   action native [[A_UnSetInvulnerable]]();
   action native [[A_UnSetReflective]]();
   action native [[A_UnSetReflectiveInvulnerable]]();
   action native [[A_UnSetShootable]]();
   action native [[A_UnsetSolid]]();
   action native [[A_VileAttack]](sound snd = "vile/stop", int initialdmg = 20, int blastdmg = 70, int blastradius = 70,
                              float thrustfac = 1.0, name damagetype = "Fire", int flags = 0);
   action native [[A_VileChase]]();
   action native [[A_VileStart]]();
   action native [[A_VileTarget]](class&lt;Actor&gt; fire = "{{Class|ArchvileFire}}");
   action native [[A_Wander]](int flags = 0);
   action native state, bool [[A_Warp]](int ptr_destination, float xofs = 0, float yofs = 0, float zofs = 0, float angle = 0,
                                    int flags = 0, state success_state = "", float heightoffset = 0, float radiusoffset = 0,
                                    float pitch = 0);
   action native [[A_WeaponOffset]](float wx = 0, float wy = 32, int flags = 0);
   native void [[A_Weave]](int xspeed, int yspeed, float xdist, float ydist);
   action native [[A_WolfAttack]](int flags = 0, sound whattoplay = "weapons/pistol", float snipe = 1.0,
                               int maxdamage = 64, int blocksize = 128, int pointblank = 2, int longrange = 4,
                               float runspeed = 160.0, class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}");
   action native [[A_XScream]]();
   native int [[ACS_NamedExecute]](name script, int mapnum=0, int arg1=0, int arg2=0, int arg3=0);
   native int [[ACS_NamedSuspend]](name script, int mapnum=0);
   native int [[ACS_NamedTerminate]](name script, int mapnum=0);
   native int [[ACS_NamedLockedExecute]](name script, int mapnum=0, int arg1=0, int arg2=0, int lock=0);
   native int [[ACS_NamedLockedExecuteDoor]](name script, int mapnum=0, int arg1=0, int arg2=0, int lock=0);
   native int [[ACS_NamedExecuteWithResult]](name script, int arg1=0, int arg2=0, int arg3=0, int arg4=0);
   native void [[ACS_NamedExecuteAlways]](name script, int mapnum=0, int arg1=0, int arg2=0, int arg3=0);
 
   States
   {
   Spawn:
     TNT1 A -1
     Stop
   Null:
     TNT1 A 1
     Stop
   GenericFreezeDeath:
     // Generic freeze death frames. Woo!
     "####" "#" 5 [[A_GenericFreezeDeath]]
     "----" A 1 [[A_FreezeDeathChunks]]
     Wait
   GenericCrush:
     POL5 A -1
     Stop
   }
 
   // Internal functions
   native state __decorate_internal_state__(state);
   native int __decorate_internal_int__(int);
   native bool __decorate_internal_bool__(bool);
   native float __decorate_internal_float__(float);
 }</text>
    <sha1>25q3u3i9jczbdeondoed6sxod7e2ca0</sha1>
  </revision>
</page>