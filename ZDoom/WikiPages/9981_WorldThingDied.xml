<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>WorldThingDied</title>
  <ns>0</ns>
  <id>9981</id>
  <revision>
    <id>53522</id>
    <parentid>53521</parentid>
    <timestamp>2024-11-01T14:11:43Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <comment>/* Passed values */</comment>
    <origin>53522</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="2837" sha1="py46emom33rblm41s8qyu9dfprdim7o" xml:space="preserve">'''{{class|StaticEventHandler}}'''

{{c|void '''WorldThingDied''' (WorldEvent ''e'')}}

== Usage ==
An [[Events and handlers|event handler]] virtual function that is called when an [[actor]] is killed (its health is reduced to 0 and it enters its [[Actor states#Death|Death state]]).

'''Note:''' "killed" doesn't mean destroyed. For the cases when an actor is completely removed, see '''[[WorldThingDestroyed]]'''.

=== Passed values ===
This event gets a pointer to the {{struct|WorldEvent}} struct and can read the following from it by preceding the value with &lt;code&gt;e.&lt;/code&gt;:
*{{c|Actor '''thing'''}}
:Pointer to the actor that was killed.
*{{c|Actor '''inflictor'''}}
:Pointer to the actor directly responsible for the damage, which is either a [[puff]] or a [[projectile]], if one was used (just like in [[DamageMobj]] and similar functions). Can be &lt;code&gt;null&lt;/code&gt;.

{{note|While this event doesn't get a pointer to the actor who did the kill, by default the killer is always put in the killed actor's '''{{c|target}}''' field, so '''{{c|e.thing.target}}''' pointer should point to the killer, unless the damage was dealt without a source (from example, by the level). If you need to get more detailed information, use '''[[WorldThingDamaged]]''' instead and check for {{c|'''&lt;nowiki&gt;e.thing.health &lt;= 0&lt;/nowiki&gt;'''}} so it's only called when the thing dies.}}

== Examples ==
This event handler puts all bosses in an array (which is globally accessible by finding the event handler with [[Events_and_handlers#Functions|EventHandler.Find()]]), and removes them when they're killed (and re-adds when they're revived):
&lt;syntaxhighlight lang="cs"&gt;
class MyEventHandler : EventHandler
{
  array&lt;Actor&gt; allBosses;

  override void WorldThingSpawned(WorldEvent e)
  {
    // if the actor has the ISMONSTER and BOSS flags,
    // put it into the array:
    if (e.thing.bIsMonster &amp;&amp; e.thing.bBoss)
    {
      allBosses.Push(e.thing);
    }
  }
  
  override void WorldThingDied(WorldEvent e)
  {
    // when an actor is killed, check if it was in the array,
    // and if so, remove it from it:
    int index = allBosses.Find(e.thing);
    if (index &lt; allBosses.Size())
    {
      allBosses.Delete(index);
    }
  }

  override void WorldThingRevived(WorldEvent e)
  {
    // if the actor is revived, put it into the array again
    // (just in case, check that it's not yet in the array):
    if (e.thing.bIsMonster &amp;&amp; e.thing.bBoss &amp;&amp; allBosses.Find(e.thing) == allBosses.Size())
    {
      allBosses.Push(e.thing);
    }
  }
}

// Example of reading it from elsewhere in the code:
let handler = MyEventHandler(EventHandler.Find('MyEventHandler'));
if (handler)
{
  // do something with allBosses.allProjectiles here
}
&lt;/syntaxhighlight&gt;

== See also ==
* [[Events and handlers]]

[[Category:ZScript]]
[[Category:Event handlers]]</text>
    <sha1>py46emom33rblm41s8qyu9dfprdim7o</sha1>
  </revision>
</page>