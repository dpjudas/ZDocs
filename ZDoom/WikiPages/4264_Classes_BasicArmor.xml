<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>Classes:BasicArmor</title>
  <ns>0</ns>
  <id>4264</id>
  <revision>
    <id>53345</id>
    <parentid>53341</parentid>
    <timestamp>2024-10-14T17:25:52Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <origin>53345</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="5922" sha1="kou9316z7p7iwsgo9ryrxzjwqwk843r" xml:space="preserve">{{Actor|
| type = Internal
| name = Basic armor
| class = BasicArmor
}}[[Classes]]: [[Classes:Inventory|Inventory]]&amp;rarr;[[Classes:Armor|Armor]]&amp;rarr;&lt;u&gt;BasicArmor&lt;/u&gt;&lt;br&gt;

'''BasicArmor''' is the internal class used to keep track of a player's current armor values in GZDoom, as well as performing the actual armor functions (i.e. damage mitigation). Note that it's ''not'' a basic class for armor pickups, rather it's a controller that stores the current armor icon, amount, absorption, etc. Creating new armor pickups requires creating items based on the [[Classes:BasicArmorPickup|BasicArmorPickup]] class (for regular armor pickups) or [[Classes:BasicArmorBonus|BasicArmorBonus]] (for armor bonus-type pickups that add to the current armor without overriding it).

The damage mitigation itself is handled through the [[AbsorbDamage]] function. That function by itself isn't limited to '''BasicArmor''', since it's defined in [[Classes:Inventory|Inventory]], and can be utilized in any item.

Hexen utilizes [[Classes:HexenArmor|HexenArmor]] rather than BasicArmor for its armor system.

'''BasicArmor''' and '''HexenArmor''' are given to the player automatically at the start of the game (both classes are given regardless of what game/IWAD is being used). Armor pickups based on the '''BasicArmorPickup''' class are never placed in the player's inventory. Instead, upon being picked up, they interact with the BasicArmor (or HexenArmor) instance in that player's inventory and modify its fields (such as icon, savepercent, and so on), after which the armor pickup is removed.

{{new|4.13.0}} As of GZDoom 4.13, it's possible to replace BasicArmor and HexenArmor with custom classes [[GameInfo_definition#BasicArmorClass|'''using MAPINFO''']]. The custom classes still have to be based on BasicArmor or HexenArmor, respectively.

== [[ZScript]] definition ==
{{ZScriptDefinitionNote|actors/inventory/armor.zs#L57}} 
&lt;syntaxhighlight lang="csharp"&gt;
class BasicArmor : Armor
{
	
	int AbsorbCount;
	double SavePercent;
	int MaxAbsorb;
	int MaxFullAbsorb;
	int BonusCount;
	Name ArmorType;
	int ActualSaveAmount;
	
	Default
	{
		Inventory.Amount 0;
		+Inventory.KEEPDEPLETED
	}

	//===========================================================================
	//
	// ABasicArmor :: Tick
	//
	// If BasicArmor is given to the player by means other than a
	// BasicArmorPickup, then it may not have an icon set. Fix that here.
	//
	//===========================================================================

	override void Tick ()
	{
		Super.Tick ();
		AbsorbCount = 0;
		if (!Icon.isValid())
		{
			String icontex = gameinfo.ArmorIcon1;

			if (SavePercent &gt;= gameinfo.Armor2Percent &amp;&amp; gameinfo.ArmorIcon2.Length() != 0)
				icontex = gameinfo.ArmorIcon2;

			if (icontex.Length() != 0)
				Icon = TexMan.CheckForTexture (icontex, TexMan.TYPE_Any);
		}
	}

	//===========================================================================
	//
	// ABasicArmor :: CreateCopy
	//
	//===========================================================================

	override Inventory CreateCopy (Actor other)
	{
		// BasicArmor that is in use is stored in the inventory as BasicArmor.
		// BasicArmor that is in reserve is not.
		let copy = BasicArmor(Spawn("BasicArmor"));
		copy.SavePercent = SavePercent != 0 ? SavePercent : 0.33335;	// slightly more than 1/3 to avoid roundoff errors.
		copy.Amount = Amount;
		copy.MaxAmount = MaxAmount;
		copy.Icon = Icon;
		copy.BonusCount = BonusCount;
		copy.ArmorType = ArmorType;
		copy.ActualSaveAmount = ActualSaveAmount;
		GoAwayAndDie ();
		return copy;
	}


	//===========================================================================
	//
	// ABasicArmor :: HandlePickup
	//
	//===========================================================================

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == "BasicArmor")
		{
			// You shouldn't be picking up BasicArmor anyway.
			return true;
		}
		return false;
	}
	
	//===========================================================================
	//
	// ABasicArmor :: AbsorbDamage
	//
	//===========================================================================

	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		int saved;

		if (!DamageTypeDefinition.IgnoreArmor(damageType))
		{
			int full = MAX(0, MaxFullAbsorb - AbsorbCount);
			
			if (damage &lt; full)
			{
				saved = damage;
			}
			else
			{
				saved = full + int((damage - full) * SavePercent);
				if (MaxAbsorb &gt; 0 &amp;&amp; saved + AbsorbCount &gt; MaxAbsorb) 
				{
					saved = MAX(0,  MaxAbsorb - AbsorbCount);
				}
			}

			if (Amount &lt; saved)
			{
				saved = Amount;
			}
			newdamage -= saved;
			Amount -= saved;
			AbsorbCount += saved;
			if (Amount == 0)
			{
				// The armor has become useless
				SavePercent = 0;
				ArmorType = 'None'; // Not NAME_BasicArmor.
				// Now see if the player has some more armor in their inventory
				// and use it if so. As in Strife, the best armor is used up first.
				BasicArmorPickup best = null;
				Inventory probe = Owner.Inv;
				while (probe != null)
				{
					let inInv = BasicArmorPickup(probe);
					if (inInv != null)
					{
						if (best == null || best.SavePercent &lt; inInv.SavePercent)
						{
							best = inInv;
						}
					}
					probe = probe.Inv;
				}
				if (best != null)
				{
					Owner.UseInventory (best);
				}
			}
			damage = newdamage;
		}

		// Once the armor has absorbed its part of the damage, then apply its damage factor, if any, to the player
		if ((damage &gt; 0) &amp;&amp; (ArmorType != 'None')) // BasicArmor is not going to have any damage factor, so skip it.
		{
			newdamage = ApplyDamageFactors(ArmorType, damageType, damage, damage);
		}
	}
}&lt;/syntaxhighlight&gt;

== [[DECORATE]] definition ==
 ACTOR &lt;u&gt;BasicArmor&lt;/u&gt; : {{Class|Armor}} native
 {
   +{{Flag|INVENTORY.KEEPDEPLETED}}
 }</text>
    <sha1>kou9316z7p7iwsgo9ryrxzjwqwk843r</sha1>
  </revision>
</page>