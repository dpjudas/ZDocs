<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>A RailAttack</title>
  <ns>0</ns>
  <id>2710</id>
  <revision>
    <id>53912</id>
    <parentid>53904</parentid>
    <timestamp>2024-11-27T10:05:49Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <origin>53912</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="9217" sha1="i3zo560ozhyqjr7jvh0dd1h7o2t4zqk" xml:space="preserve">{{DISPLAYTITLE:A_RailAttack}}

'''[[Classes:StateProvider|StateProvider]]'''

action void '''A_RailAttack'''(int ''damage'', int ''spawnofs_xy'' = 0, bool ''useammo'' = true, color ''color1'' = 0, color ''color2'' = 0, int ''flags'' = 0, double ''maxdiff'' = 0, class&lt;Actor&gt; ''pufftype'' = "BulletPuff", double ''spread_xy'' = 0, double ''spread_z'' = 0, double ''range'' = 0, int ''duration'' = 0, double ''sparsity'' = 1.0, double ''driftspeed'' = 1.0, class&lt;Actor&gt; ''spawnclass'' = "none", double ''spawnofs_z'' = 0, int ''spiraloffset'' = 270, int ''limit'' = 0)

==Usage==
Fires a rail attack. Only works on weapons.

{{note|With the advent of [[ZScript]], certain things should be considered:&lt;br&gt;
1. This function has a very long list of arguments. As such, using [[ZScript named arguments|'''named arguments''']] is recommended to keep track of them.&lt;br&gt;
2. It is highly discouraged to rely on the ''spawnclass'' argument to spawn actors as railgun particles. Spawning multiple actors per [[tic]] like this can lead to significant performance drops, especially if they have complex visuals or collision. Using [[SpawnParticle (ZScript)|{{c|level.SpawnParticle}}]] to spawn custom, textured particles, or designing a fully custom attack with [[LineAttack (ZScript)|{{c|LineAttack}}]] and the {{class|VisualThinker}} class can yield much more performant and flexible results.}}

=== Parameters ===
*{{c|int '''damage'''}}
:The damage to inflict on each target that is hit; this can be a fixed value or an expression.
*{{c|int '''spawnofs_xy'''}}
:The horizontal distance from the center of the screen at which the railgun tracer should originate. Default is 0.
*{{c|bool '''useammo'''}}
:Whether or not ammo should be used up when firing. Default is ''true''.
*{{c|color '''color1'''}}
*{{c|color '''color2'''}}
:The color of the particles that form the spiral ({{c|color1}}) and the core beam ({{c|color2}}) of the railgun's ray. This can be given as {{c|RRGGBB}}, a color defined in the [[X11R6RGB]] lump or any other [[ZScript_data_types#Color|supported color format]]. If the string is invalid, the particles will be black. &lt;code&gt;""&lt;/code&gt; in [[ZScript]] (or &lt;code&gt;None&lt;/code&gt; without quotes in [[DECORATE]]) will make the respective part of the ray (spiral or core) invisible. A value of 0 (the default), which is treated specially, draws the particles in one of three shades of gray, picked randomly.
*{{c|int '''flags'''}}
:The following flags can be combined with &lt;code&gt;|&lt;/code&gt;
:* '''RGF_SILENT''' — The railgun will not play an attack sound when firing.
:* '''RGF_NOPIERCING''' — The railgun will stop at the first enemy hit, rather than passing through.
:* '''RGF_EXPLICITANGLE''' — The spread parameters are taken as explicit angles rather than maximum random amplitude.
:* '''RGF_FULLBRIGHT''' — Rail particles will be rendered at maximum brightness, ignoring sector lighting.
:* '''RGF_CENTERZ''' — Z offset originates from half of the player's height (adjusted when crouched), instead of using the [[Actor_properties#Player.AttackZOffset|Player.AttackZOffset property]].
:* '''RGF_NORANDOMPUFFZ''' — Disables the random z-offset of spawned puffs.
*{{c|double '''maxdiff'''}}
:This is used to make the rail more jagged, or lightning-like, with higher numbers. Default is 0 (straight).
*{{c|class&lt;Actor&gt; '''pufftype'''}}
:The '''[[puff]]''' actor to use. By default, the puff will only spawn in rare circumstances (e.g. when hitting a dormant monster) unless the puff actor has the {{Flag|'''ALWAYSPUFF'''}} flag set. Even if not shown, the selected puff will still be used for applying [[Damage type|custom damagetypes]] and other properties. Puffs with the '''{{Flag|ALWAYSPUFF}}''' flag spawn on floors and ceilings. Default is '''{{class|BulletPuff}}'''.
*{{c|double '''spread_xy'''}}
:Maximum angle of random horizontal spread. Default is 0.
*{{c|double '''spread_z'''}}
:Maximum angle of random vertical spread. Default is 0.
*{{c|double '''range'''}}
:Maximum distance (in map units, as fixed-point) the rail shot will travel before vanishing. Default is 0, which uses the default value of 8192 as the range.
*{{c|int '''duration'''}}
:Lifetime of spawned particles, in tics. Default is 0, which uses the default value of 35 as the duration.
*{{c|double '''sparsity'''}}
:Distance between individial particles. Implemented as a multiplier. Default is 1.0.
*{{c|double '''driftspeed'''}}
:Speed at which particles "drift" away from their initial spawn point. Implemented as a multiplier. Default is 1.0.
*{{c|class&lt;Actor&gt; '''spawnclass'''}}
:Actor to spawn in place of trail particles. If non-null, the specified actor will be spaced ''sparsity'' units apart instead of the usual trail. It will also inherit the pitch of the shooter and track the owner, allowing for explosive trails to not hurt the owner. Particle-specific properties such as ''duration'', ''driftspeed'', and rail color are ignored in such a case. Default is "{{c|'''None'''}}".
:'''{{color|red|Warning:}}''' Using actors for beam particles is generally discouraged, especially when the beam is long and/or the actors in question use additive [[renderstyle]]. Spawning multiple actors per a single [[tic]] can cause significant performance drops. For highly customized beams, using [[SpawnParticle (ZScript)|custom particles in ZScript]] is recommended.
*{{c|double '''spawnofs_z'''}}
:The vertical distance from the center of the screen at which the railgun tracer should originate. Negative values shift the tracer down, positive values shift it up. Default is 0.
*{{c|double '''spiraloffset'''}}
:The angle from which the outer ring starts spiraling. Default is 270.
*{{c|int '''limit'''}}
:Sets the maximum number of actors to pierce through, if they are applicable for damaging. Default is 0 (no limit is set).

== Examples ==
This is a generic railgun for the player. This will work copy and pasted, but you'll need graphics. Notice that this example does not have a gunflash, you can still add one though

=== [[ZScript]] ===
&lt;syntaxhighlight lang="csharp"&gt;
class PlayerRailgun : Weapon
{
    Default
    {
        Radius 24;
        Height 16;
        Obituary "%o got railgunned by %k.";
        Weapon.SelectionOrder 100;
        Weapon.SlotNumber 6;
        Weapon.Kickback 500;
        Weapon.AmmoType "Clip";
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 30;
        AttackSound "weapons/rbeam";
        +EXTREMEDEATH;
    }
	States
	{
	Spawn:
		RLGN A -1;
		Stop;
	Ready:
		RLGN B 1 A_WeaponReady;
		Loop;
	Deselect:
		RLGN B 1 A_Lower;
		Loop;
	Select:
		RLGN B 1 A_Raise;
		Loop;
	Fire:
		RLGN C 4;
		RLGN D 4 bright A_RailAttack(2, color1:"ffffa0", color2:"ffffa0", pufftype:null);
		RLGN E 4 bright;
		RLGN F 4;
		TNT1 A 0 A_ReFire;
		Goto Ready;
	}
}&lt;/syntaxhighlight&gt;

=== [[DECORATE]] {{deprecated}} ===
 ACTOR PlayerRailgun : {{Class|Weapon}}
 {
   {{Property|Radius}} 24
   {{Property|Height}} 16
   {{Property|Obituary}} "%o got railgunned by %k."
   {{Property|Weapon.SelectionOrder}} 100
   {{Property|Weapon.SlotNumber}} 6
   {{Property|Weapon.Kickback}} 500
   {{Property|Weapon.AmmoType}} "{{Class|Clip}}"
   {{Property|Weapon.AmmoUse}} 1
   {{Property|Weapon.AmmoGive}} 30
   {{Property|AttackSound}} "weapons/rbeam"
   +{{flag|EXTREMEDEATH}}
   States
   {
   Spawn:
     RLGN A -1
     Stop
   Ready:
     RLGN B 1 [[A_WeaponReady]]
     Loop
   Deselect:
     RLGN B 1 [[A_Lower]]
     Loop
   Select:
     RLGN B 1 [[A_Raise]]
     Loop
   Fire:
     RLGN C 4
     RLGN D 0 [[A_RailAttack]](2, 0, 1, "ffffa0", "ffffa0", 0, 0, "none")
     RLGN E 8 Bright
     RLGN F 4
     TNT1 A 0 [[A_ReFire]]
     Goto Ready
   }
 }

== [[ZScript]] definition ==
{{ZScriptDefinitionNote|actors/inventory/stateprovider.zs}}
&lt;syntaxhighlight lang="csharp"&gt;
	action void A_RailAttack(int damage, int spawnofs_xy = 0, bool useammo = true, color color1 = 0, color color2 = 0, int flags = 0, double maxdiff = 0, class&lt;Actor&gt; pufftype = "BulletPuff", double spread_xy = 0, double spread_z = 0, double range = 0, int duration = 0, double sparsity = 1.0, double driftspeed = 1.0, class&lt;Actor&gt; spawnclass = "none", double spawnofs_z = 0, int spiraloffset = 270, int limit = 0)
	{
		if (range == 0) range = 8192;
		if (sparsity == 0) sparsity=1.0;

		let player = self.player;
		if (!player) return;

		let weapon = player.ReadyWeapon;

		if (useammo &amp;&amp; weapon != NULL &amp;&amp; stateinfo != null &amp;&amp; stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}

		if (!(flags &amp; RGF_EXPLICITANGLE))
		{
			spread_xy = spread_xy * Random2[crailgun]() / 255.;
			spread_z = spread_z * Random2[crailgun]() / 255.;
		}

		FRailParams p;
		p.damage = damage;
		p.offset_xy = spawnofs_xy;
		p.offset_z = spawnofs_z;
		p.color1 = color1;
		p.color2 = color2;
		p.maxdiff = maxdiff;
		p.flags = flags;
		p.puff = pufftype;
		p.angleoffset = spread_xy;
		p.pitchoffset = spread_z;
		p.distance = range;
		p.duration = duration;
		p.sparsity = sparsity;
		p.drift = driftspeed;
		p.spawnclass = spawnclass;
		p.SpiralOffset = SpiralOffset;
		p.limit = limit;
		self.RailAttack(p);
	}
&lt;/syntaxhighlight&gt;

[[Category:StateProvider]]
[[Category:ZScript]]</text>
    <sha1>i3zo560ozhyqjr7jvh0dd1h7o2t4zqk</sha1>
  </revision>
</page>