<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>Doom Builder ACS configuration</title>
  <ns>0</ns>
  <id>1025</id>
  <revision>
    <id>53487</id>
    <parentid>50763</parentid>
    <timestamp>2024-11-01T11:28:30Z</timestamp>
    <contributor>
      <username>Blue Shadow</username>
      <id>2021</id>
    </contributor>
    <minor />
    <comment>/* The Configuration */ added GetNetID and SetActivatorByNetID</comment>
    <origin>53487</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="49525" sha1="q74nbpkm3i2a6auhjya3wh6ovgfuzgk" xml:space="preserve">The '''Doom Builder ACS Configuration''' is the configuration that [[Doom Builder]] uses in its script editor to provide syntax highlighting and autocomplete functionality with CTRL+SPACE. It exists here on ZDoom's wiki so that it can be kept up-to-date just like the documentation. New releases of [[Doom Builder]] will use this as a source for its ACS configuration file, and where possible, even its ZDoom game configuration file.

Note that this is the script configuration for Doom Builder 1. To use this list for Doom Builder 2, you will need to modify the settings at the top (see the ZDoom_ACS.cfg with Doom Builder 2 for example).

== Update Guidelines ==

Please use these as guidelines for updating this configuration, so that less work is needed to convert this page into the acs.cfg file with Doom Builder.

* Always use MixedCase for function names, exactly as ACS defines it. Do '''not''' force to UPPERCASE or lowercase, this can be done with Doom Builder if needed.
* Always use lowercase for function arguments.
* Each line should be like this:  FunctionName = "FunctionName(argument, argument,...)";
* After the comma between arguments, add a space. (easier to read)
* Do not leave spaces within arguments.
** This is wrong: FunctionName = "FunctionName(first id, second id)";
** This is right: FunctionName = "FunctionName(first, second)";
* Try to keep it a little in alphabetical order so we can easily find a function when looking for one here. However, Doom Builder does not care.
* Add a space in front of each line so it will be formatted monospace.


== The Configuration ==
&lt;pre&gt;
/*******************************************************************\
	Doom Builder Script highlighting definitions for ACS
\*******************************************************************/

type = "Doom Builder Script Configuration";

casesensitive = 0;
insertcase = 0;		// 0=Normal, 1=Lowercase, 2=Uppercase
linecomment = "//";
commentopen = "/*";
commentclose = "*/";
string = "\"";
escape = "\\";
terminator = ";";
scopeopen = "{";
scopeclose = "}";
delimiters = " \n\r\t(){}[]:;!%^&amp;*-+=.,&lt;&gt;/\?|\"";
functionopen = "(";
functionclose = ")";
argumentdelimiter = ",";
keywordhelp = "http://www.zdoom.org/wiki/index.php?title=%K";

keywords
{
	#Define = "#Define identifier expression";
	#EncryptStrings = "#EncryptStrings";
	#Import = "#Import";
	#Include = "#Include";
	#LibDefine = "#LibDefine identifier expression";
	#Library = "#Library";
	#NoCompact = "#NoCompact";
	#NoWadAuthor = "#NoWadAuthor";
	#WadAuthor = "#WadAuthor";
	#region = "#region block";
	#endregion = "end of #region block";
	ACS_Execute = "ACS_Execute(script, map, arg1, arg2, arg3)";
	ACS_ExecuteAlways = "ACS_ExecuteAlways(script, map, arg1, arg2, arg3)";
	ACS_ExecuteWait = "ACS_ExecuteWait(script, unused, arg1, arg2, arg3)";
	ACS_ExecuteWithResult = "ACS_ExecuteWithResult(script, arg1, arg2, arg3, arg4)";
	ACS_LockedExecute = "ACS_LockedExecute(script, map, arg1, arg2, lock)";
	ACS_LockedExecuteDoor = "ACS_LockedExecuteDoor(script, map, arg1, arg2, lock)";
	ACS_NamedExecute = "ACS_NamedExecute(script, map, arg1, arg2, arg3)";
	ACS_NamedExecuteAlways = "ACS_NamedExecuteAlways(script, map, arg1, arg2, arg3)";
	ACS_NamedExecuteWait = "ACS_NamedExecuteWait(script, unused, arg1, arg2, arg3)";
	ACS_NamedExecuteWithResult = "ACS_NamedExecuteWithResult(script, arg1, arg2, arg3, arg4)";
	ACS_NamedLockedExecute = "ACS_NamedLockedExecute(script, map, arg1, arg2, lock)";
	ACS_NamedLockedExecuteDoor = "ACS_NamedLockedExecuteDoor(script, map, arg1, arg2, lock)";
	ACS_NamedSuspend = "ACS_NamedSuspend(script, map)";
	ACS_NamedTerminate = "ACS_NamedTerminate(script, map)";
	ACS_Suspend = "ACS_Suspend(script, map)";
	ACS_Terminate = "ACS_Terminate(script, map)";
	ActivatorSound = "ActivatorSound(sound, volume)";
	ActivatorTID = "ActivatorTID()";
	AmbientSound = "AmbientSound(sound, volume)";
	AnnouncerSound = "AnnouncerSound(sound, flags)";
	Autosave = "Autosave()";
	BeginDBTransaction = "BeginDBTransaction()";
	BlueCount = "BlueCount()";
	BlueReturn = "Script expression BlueReturn";
	BlueScore = "BlueScore()";
	BlueTeamCount = "BlueTeamCount()";
	BlueTeamScore = "BlueTeamScore()";
	Bool = "Bool expression";
	Break = "Break";
	CancelFade = "CancelFade()";
	CanRaiseActor = "CanRaiseActor(tid)";
	Case = "Case expression:";
	Ceil = "Ceil(value)";
	Ceiling_CrushAndRaise = "Ceiling_CrushAndRaise(tag, speed, crush, crushmode)";
	Ceiling_CrushAndRaiseA = "Ceiling_CrushAndRaiseA(tag, dspeed, uspeed, crush, crushmode)";
	Ceiling_CrushAndRaiseDist = "Ceiling_CrushAndRaiseDist(tag, dist, speed, damage, crushmode)";
	Ceiling_CrushAndRaiseSilentA = "Ceiling_CrushAndRaiseSilentA(tag, dspeed, uspeed, crush, crushmode)";
	Ceiling_CrushAndRaiseSilentDist = "Ceiling_CrushAndRaiseSilentDist(tag, dist, speed, damage, crushmode)";
	Ceiling_CrushRaiseAndStay = "Ceiling_CrushRaiseAndStay(tag, speed, crush, crushmode)";
	Ceiling_CrushRaiseAndStayA = "Ceiling_CrushRaiseAndStayA(tag, dspeed, uspeed, crush, crushmode)";
	Ceiling_CrushRaiseAndStaySilA = "Ceiling_CrushRaiseAndStaySilA(tag, dspeed, uspeed, crush, crushmode)";
	Ceiling_CrushStop = "Ceiling_CrushStop(tag)";
	Ceiling_LowerAndCrush = "Ceiling_LowerAndCrush(tag, speed, crush, crushmode)";
	Ceiling_LowerAndCrushDist = "Ceiling_LowerAndCrushDist(tag, speed, crush, dist, crushmode)";
	Ceiling_LowerByTexture = "Ceiling_LowerByTexture(tag, speed, change, crush)";
	Ceiling_LowerByValue = "Ceiling_LowerByValue(tag, speed, height)";
	Ceiling_LowerByValueTimes8 = "Ceiling_LowerByValueTimes8(tag, speed, height)";
	Ceiling_LowerInstant = "Ceiling_LowerInstant(tag, unused, height)";
	Ceiling_LowerToFloor = "Ceiling_LowerToFloor(tag, speed)";
	Ceiling_LowerToHighestFloor = "Ceiling_LowerToHighestFloor(tag, speed)";
	Ceiling_LowerToLowest = "Ceiling_LowerToLowest(tag, speed)";
	Ceiling_LowerToNearest = "Ceiling_LowerToNearest(tag, speed, change, crush)";
	Ceiling_MoveToValue = "Ceiling_MoveToValue(tag, speed, height, neg)";
	Ceiling_MoveToValueAndCrush = "Ceiling_MoveToValueAndCrush(tag, speed, height, crush, crushmode)";
	Ceiling_MoveToValueTimes8 = "Ceiling_MoveToValueTimes8(tag, speed, height, neg)";
	Ceiling_RaiseByTexture = "Ceiling_RaiseByTexture(tag, speed, change)";
	Ceiling_RaiseByValue = "Ceiling_RaiseByValue(tag, speed, height)";
	Ceiling_RaiseByValueTimes8 = "Ceiling_RaiseByValueTimes8(tag, speed, height)";
	Ceiling_RaiseInstant = "Ceiling_RaiseInstant(tag, unused, height)";
	Ceiling_RaiseToHighest = "Ceiling_RaiseToHighest(tag, speed, change)";
	Ceiling_RaiseToHighestFloor = "Ceiling_RaiseToHighestFloor(tag, speed, change)";
	Ceiling_RaiseToLowest = "Ceiling_RaiseToLowest(tag, speed, change)";
	Ceiling_RaiseToNearest = "Ceiling_RaiseToNearest(tag, speed)";
	Ceiling_Stop = "Ceiling_Stop(tag)";
	Ceiling_ToFloorInstant = "Ceiling_ToFloorInstant(tag, change, crush, gap)";
	Ceiling_ToHighestInstant = "Ceiling_ToHighestInstant(tag, change, crush)";
	Ceiling_Waggle = "Ceiling_Waggle(tag, amp, freq, offset, time)";
	ChangeActorAngle = "ChangeActorAngle(tid, angle, interpolate)";
	ChangeActorPitch = "ChangeActorPitch(tid, pitch, interpolate)";
	ChangeActorRoll = "ChangeActorRoll(tid, angle, interpolate)";
	ChangeCamera = "ChangeCamera(tid, who, revert)";
	ChangeCeiling = "ChangeCeiling(tag, flat)";
	ChangeFloor = "ChangeFloor(tag, flat)";
	ChangeLevel = "ChangeLevel(mapname, position, flags, skill)";
	ChangeSkill = "ChangeSkill(skill)";
	ChangeSky = "ChangeSky(sky1, sky2)";
	CheckActorCeilingTexture = "CheckActorCeilingTexture(tid, texture)";
	CheckActorClass = "CheckActorClass(tid, class)";
	CheckActorFloorTexture = "CheckActorFloorTexture(tid, texture)";
	CheckActorInventory = "CheckActorInventory(tid, inventoryitem)";
	CheckActorProperty = "CheckActorProperty(tid, property, value)";
	CheckActorState = "CheckActorState(tid, statename, exact)";
	CheckClass = "CheckClass(classname)";
	CheckFlag = "CheckFlag(tid, flag)";
	CheckFont = "CheckFont(fontname)";
	CheckInventory = "CheckInventory(inventoryitem)";
	CheckPlayerCamera = "CheckPlayerCamera(player)";
	CheckProximity = "CheckProximity(tid, classname, distance, count, flags, pointer)";
	CheckSight = "CheckSight(source, dest, flags)";
	CheckWeapon = "CheckWeapon(weapon)";
	ClassifyActor = "ClassifyActor(tid)";
	ClearActorInventory = "ClearActorInventory(tid)";
	ClearForceField = "ClearForceField(tag)";
	ClearInventory = "ClearInventory()";
	ClearLineSpecial = "ClearLineSpecial()";
	ConsoleCommand = "ConsoleCommand(command)";
	ConsolePlayerNumber = "ConsolePlayerNumber()";
	Const = "Const";
	Continue = "Continue";
	cos = "cos(angle)";
	CountDBResults = "CountDBResults(results)";
	CreateTranslation = "CreateTranslation(transnumber, translation, translation, translation, ...)";
	DamageActor = "DamageActor(target_tid, target_pointer, inflictor_tid, inflictor_pointer, amount, damagetype)";
	DamageThing = "DamageThing(amount, mod)";
	Death = "Script expression Death";
	Default = "Default:";
	Delay = "Delay(tics)";
	Disconnect = "Script expression Disconnect";
	Do = "Do";
	Door_Animated = "Door_Animated(tag, speed, delay, lock)";
	Door_AnimatedClose = "Door_AnimatedClose(tag, speed)";
	Door_Close = "Door_Close(tag, speed, lighttag)";
	Door_CloseWaitOpen = "Door_CloseWaitOpen(tag, speed, delay, lighttag)";
	Door_LockedRaise = "Door_LockedRaise(tag, speed, delay, lock, lighttag)";
	Door_Open = "Door_Open(tag, speed, lighttag)";
	Door_Raise = "Door_Raise(tag, speed, delay, lighttag)";
	Door_WaitClose = "Door_WaitClose(tag, speed, wait, lighttag)";
	Door_WaitRaise = "Door_WaitRaise(tag, speed, delay, wait, lighttag)";
	DropInventory = "DropInventory(tid, item)";
	DropItem = "DropItem(tid, item, dropamount, chance)";
	Elevator_LowerToNearest = "Elevator_LowerToNearest(tag, speed)";
	Elevator_MoveToFloor = "Elevator_MoveToFloor(tag, speed)";
	Elevator_RaiseToNearest = "Elevator_RaiseToNearest(tag, speed)";
	Else = "Else";
	EndDBTransaction = "EndDBTransaction()";
	Enter = "Script expression Enter";
	Exit_Normal = "Exit_Normal(pos)";
	Exit_Secret = "Exit_Secret(pos)";
	FadeRange = "FadeRange(red1, green1, blue1, amount1, red2, green2, blue2, amount2, seconds)";
	FadeTo = "FadeTo(red, green, blue, amount, seconds)";
	FixedDiv = "FixedDiv(a, b)";
	FixedMul = "FixedMul(a, b)";
	FixedSqrt = "FixedSqrt(number)";
	Floor = "Floor(value)";
	Floor_CrushStop = "Floor_CrushStop(tag)";
	Floor_Donut = "Floor_Donut(ptag, pspeed, sspeed)";
	Floor_LowerByTexture = "Floor_LowerByTexture(tag, speed, change)";
	Floor_LowerByValue = "Floor_LowerByValue(tag, speed, height)";
	Floor_LowerByValueTimes8 = "Floor_LowerByValueTimes8(tag, speed, height)";
	Floor_LowerInstant = "Floor_LowerInstant(tag, unused, height)";
	Floor_LowerToHighest = "Floor_LowerToHighest(tag, speed, adjust, force_adjust)";
	Floor_LowerToHighestEE = "Floor_LowerToHighestEE(tag, speed, change)";
	Floor_LowerToLowest = "Floor_LowerToLowest(tag, speed)";
	Floor_LowerToLowestCeiling = "Floor_LowerToLowestCeiling(tag, speed, change)";
	Floor_LowerToLowestTxTy = "Floor_LowerToLowestTxTy(tag, speed)";
	Floor_LowerToNearest = "Floor_LowerToNearest(tag, speed)";
	Floor_MoveToValue = "Floor_MoveToValue(tag, speed, height, neg)";
	Floor_MoveToValueAndCrush = "Floor_MoveToValueAndCrush(tag, speed, height, crush, crushmode)";
	Floor_MoveToValueTimes8 = "Floor_MoveToValueTimes8(tag, speed, height, neg)";
	Floor_RaiseAndCrush = "Floor_RaiseAndCrush(tag, speed, crush, crushmode)";
	Floor_RaiseAndCrushDoom = "Floor_RaiseAndCrushDoom(tag, speed, crush, crushmode)";
	Floor_RaiseByTexture = "Floor_RaiseByTexture(tag, speed)";
	Floor_RaiseByValue = "Floor_RaiseByValue(tag, speed, height)";
	Floor_RaiseByValueTimes8 = "Floor_RaiseByValueTimes8(tag, speed, height)";
	Floor_RaiseByValueTxTy = "Floor_RaiseByValueTxTy(tag, speed, height)";
	Floor_RaiseInstant = "Floor_RaiseInstant(tag, unused, height)";
	Floor_RaiseToCeiling = "Floor_RaiseToCeiling(tag, speed, change, crush, gap)";
	Floor_RaiseToHighest = "Floor_RaiseToHighest(tag, speed)";
	Floor_RaiseToLowest = "Floor_RaiseToLowest(tag, change, crush)";
	Floor_RaiseToLowestCeiling = "Floor_RaiseToLowestCeiling(tag, speed)";
	Floor_RaiseToNearest = "Floor_RaiseToNearest(tag, speed)";
	Floor_Stop = "Floor_Stop(tag)";
	Floor_ToCeilingInstant = "Floor_ToCeilingInstant(tag, change, crush, gap)";
	Floor_TransferNumeric = "Floor_TransferNumeric(tag)";
	Floor_TransferTrigger = "Floor_TransferTrigger(tag)";
	Floor_Waggle = "Floor_Waggle(tag, amp, freq, offset, time)";
	FloorAndCeiling_LowerByValue = "FloorAndCeiling_LowerByValue(tag, speed, height)";
	FloorAndCeiling_LowerRaise = "FloorAndCeiling_LowerRaise(tag, fspeed, cspeed, boomemu)";
	FloorAndCeiling_RaiseByValue = "FloorAndCeiling_RaiseByValue(tag, speed, height)";
	For = "For(initialization; condition; iteration)";
	ForceField = "ForceField()";
	FreeDBResults = "FreeDBResults(results)";
	FS_Execute = "FS_Execute(script, side, keynum, message)";
	Function = "Function Void expression (Void)";
	GameSkill = "GameSkill()";
	GameType = "GameType()";
	Generic_Ceiling = "Generic_Ceiling(tag, speed, height, target, flag)";
	Generic_Crusher = "Generic_Crusher(tag, dspeed, uspeed, silent, crush)";
	Generic_CrusherDist = "Generic_CrusherDist(tag, dspeed, uspeed, silent, crush)";
	Generic_Crusher2 = "Generic_Crusher2(tag, dspeed, uspeed, silent, crush)";
	Generic_Door = "Generic_Door(tag, speed, kind, delay, lock)";
	Generic_Floor = "Generic_Floor(tag, speed, height, target, flags)";
	Generic_Lift = "Generic_Lift(tag, speed, delay, type, height)";
	Generic_Stairs = "Generic_Stairs(tag, speed, height, flags, reset)";
	GetActorAngle = "GetActorAngle(tid)";
	GetActorCeilingZ = "GetActorCeilingZ(tid)";
	GetActorClass = "GetActorClass(tid)";
	GetActorFloorTerrain = "GetActorFloorTerrain(tid)";
	GetActorFloorTexture = "GetActorFloorTexture(tid)";
	GetActorFloorZ = "GetActorFloorZ(tid)";
	GetActorLightLevel = "GetActorLightLevel(tid)";
	GetActorPitch = "GetActorPitch(tid)";
	GetActorPowerupTics = "GetActorPowerupTics(tid, powerup)";
	GetActorProperty = "GetActorProperty(tid, property)";
	GetActorRoll = "GetActorRoll(tid)";
	GetActorVelX = "GetActorVelX(tid)";
	GetActorVelY = "GetActorVelY(tid)";
	GetActorVelZ = "GetActorVelZ(tid)";
	GetActorViewHeight = "GetActorViewHeight(tid)";
	GetActorX = "GetActorX(tid)";
	GetActorY = "GetActorY(tid)";
	GetActorZ = "GetActorZ(tid)";
	GetAirSupply = "GetAirSupply(playernumber)";
	GetAmmoCapacity = "GetAmmoCapacity(ammotype)";
	GetArmorInfo = "GetArmorInfo(infotype)";
	GetArmorType = "GetArmorType(armortype, playernumber)";
	GetChar = "GetChar(string, index)";
	GetCVar = "GetCVar(cvarname)";
	GetCVarString = "GetCVarString(cvarname)";
	GetDBEntries = "GetDBEntries(namespace)";
	GetDBEntry = "GetDBEntry(namespace, key)";
	GetDBEntryRank = "GetDBEntryRank(namespace, key, order)";
	GetDBEntryString = "GetDBEntryString(namespace, key, order)";
	GetDBResultKeyString = "GetDBResultKeyString(results, row)";
	GetDBResultValue = "GetDBResultValue(results, row)";
	GetDBResultValueString = "GetDBResultValueString(results, row)";
	GetGamemodeState = "GetGamemodeState()";
	GetInvasionState = "GetInvasionState()";
	GetInvasionWave = "GetInvasionWave()";
	GetLevelInfo = "GetLevelInfo(levelinfo)";
	GetLineActivation = "GetLineActivation(lineid)";
	GetLineHealth = "GetLineHealth(lineid)";
	GetLineRowOffset = "GetLineRowOffset()";
	GetLineUDMFFixed = "GetLineUDMFFixed(lineid, key)";
	GetLineUDMFInt = "GetLineUDMFInt(lineid, key)";
	GetLineX = "GetLineX(unknown parameter list)";
	GetLineY = "GetLineY(unknown parameter list)";
	GetMaxInventory = "GetMaxInventory(tid, inventory)";
	GetNetID = "GetNetID(tid, index, pointer)";
	GetPlayerAccountName = "GetPlayerAccountName(player)";
	GetPlayerInfo = "GetPlayerInfo(playernumber, playerinfo)";
	GetPlayerInput = "GetPlayerInput(playernumber, input)";
	GetPlayerLivesLeft = "GetPlayerLivesLeft(player)";
	GetPolyobjX = "GetPolyobjX(polyid)";
	GetPolyobjY = "GetPolyobjY(polyid)";
	GetScreenHeight = "GetScreenHeight()";
	GetScreenWidth = "GetScreenWidth()";
	GetSectorCeilingZ = "GetSectorCeilingZ(tag, x, y)";
	GetSectorFloorZ = "GetSectorFloorZ(tag, x, y)";
	GetSectorHealth = "GetSectorHealth(tag, part)";
	GetSectorLightLevel = "GetSectorLightLevel(tag)";
	GetSectorUDMFFixed = "GetSectorUDMFFixed(tag, key)";
	GetSectorUDMFInt = "GetSectorUDMFInt(tag, key)";
	GetSideUDMFFixed = "GetSideUDMFFixed(lineid, side, key)";
	GetSideUDMFInt = "GetSideUDMFInt(lineid, side, key)";
	GetSigilPieces = "GetSigilPieces()";
	GetTeamProperty = "GetTeamProperty(team, property)";
	GetThingUDMFFixed = "GetThingUDMFFixed(tid, key)";
	GetThingUDMFInt = "GetThingUDMFInt(tid, key)";
	GetTimeProperty = "GetTimeProperty(timestamp, which, utc)";
	GetUserArray = "GetUserArray(tid, name, pos)";
	GetUserCVar = "GetUserCVar(playernum, cvarname)";
	GetUserCVarString = "GetUserCVarString(playernum, cvarname)";
	GetUserVariable = "GetUserVariable(tid, name)";
	GetWeapon = "GetWeapon()";
	GiveActorInventory = "GiveActorInventory(tid, inventoryitem, amount)";
	GiveInventory = "GiveInventory(inventoryitem, amount)";
	GlassBreak = "GlassBreak(dontspawnjunk)";
	Global = "Global Int expression:identifier";
	HealThing = "HealThing(amount)";
	HudMessage = "HudMessage(text; type, id, color, x, y, holdtime, alpha)";
	HudMessageBold = "HudMessageBold(text; type, id, color, x, y, holdtime, alpha)";
	If = "If(expression)";
	IncrementDBEntry = "IncrementDBEntry(namespace, key, value)";
	Int = "Int expression";
	IsMultiplayer = "IsMultiplayer()";
	IsNetworkGame = "IsNetworkGame()";
	IsOneFlagCTF = "IsOneFlagCTF()";
	IsPointerEqual = "IsPointerEqual(ptr_select1, ptr_select2, tid1, tid2)";
	IsTIDUsed = "IsTIDUsed(tid)";
	KickFromGame = "KickFromGame(player, reason)";
	Kill = "Script expression Kill";
	Light_ChangeToValue = "Light_ChangeToValue(tag, value)";
	Light_Fade = "Light_Fade(tag, value, tics)";
	Light_Flicker = "Light_Flicker(tag, upper, lower)";
	Light_ForceLightning = "Light_ForceLightning(mode)";
	Light_Glow = "Light_Glow(tag, upper, lower, tics)";
	Light_LowerByValue = "Light_LowerByValue(tag, value)";
	Light_MaxNeighbor = "Light_MaxNeighbor(tag)";
	Light_MinNeighbor = "Light_MinNeighbor(tag)";
	Light_RaiseByValue = "Light_RaiseByValue(tag, value)";
	Light_Stop = "Light_Stop(tag)";
	Light_Strobe = "Light_Strobe(tag, upper, lower, u-tics, l-tics)";
	Light_StrobeDoom = "Light_StrobeDoom(tag, u-tics, l-tics)";
	Lightning = "Script expression Lightning";
	Line_AlignCeiling = "Line_AlignCeiling(lineid, side)";
	Line_AlignFloor = "Line_AlignFloor(lineid, side)";
	Line_SetAutomapFlags = "Line_SetAutomapFlags(lineid, setflags, clearflags)";
	Line_SetAutomapStyle = "Line_SetAutomapStyle(lineid, style)";
	Line_SetBlocking = "Line_SetBlocking(lineid, setflags, clearflags)";
	Line_SetHealth = "Line_SetHealth(lineid, health)";
	Line_SetPortalTarget = "Line_SetPortalTarget(sourceline, targetline)";
	Line_SetTextureOffset = "Line_SetTextureOffset(lineid, x, y, side, flags)";
	Line_SetTextureScale = "Line_SetTextureScale(lineid, x, y, side, flags)";
	LineAttack = "LineAttack(tid, angle, pitch, damage, pufftype, damagetype, range, flags, pufftid)";
	LineSide = "LineSide()";
	LocalAmbientSound = "LocalAmbientSound(sound, volume)";
	LocalSetMusic = "LocalSetMusic(song, order, unused)";
	Log = "Log(type:expression)";
	MorphActor = "MorphActor(tid, playerclass, monsterclass, duration, style, morphflash, unmorphflash)";
	Music_Change = "Music_Change(music, pattern)";
	NamedRequestScriptPuke = "NamedRequestScriptPuke(script, arg0, arg1, arg2, arg3)";
	NamedScriptWait = "NamedScriptWait(script)";
	Net = "Script expression Net";
	NoiseAlert = "NoiseAlert(target_tid, emiter_tid)";
	Open = "Script expression Open";
	PickActor = "PickActor(source_tid, angle, pitch, distance, new_tid, actor_mask, wall_mask, flags)";
	Pickup = "Script expression Pickup";
	Pillar_Build = "Pillar_Build(tag, speed, height)";
	Pillar_BuildAndCrush = "Pillar_BuildAndCrush(tag, speed, height, crush, crushmode)";
	Pillar_Open = "Pillar_Open(tag, speed, fdist, cdist)";
	Plat_DownByValue = "Plat_DownByValue(tag, speed, delay, height)";
	Plat_DownWaitUpStay = "Plat_DownWaitUpStay(tag, speed, delay)";
	Plat_DownWaitUpStayLip = "Plat_DownWaitUpStayLip(tag, speed, delay, lip, sound)";
	Plat_PerpetualRaise = "Plat_PerpetualRaise(tag, speed, delay)";
	Plat_PerpetualRaiseLip = "Plat_PerpetualRaiseLip(tag, speed, delay, lip)";
	Plat_RaiseAndStayTx0 = "Plat_RaiseAndStayTx0(tag, speed, lockout)";
	Plat_Stop = "Plat_Stop(tag)";
	Plat_ToggleCeiling = "Plat_ToggleCeiling(tag)";
	Plat_UpByValue = "Plat_UpByValue(tag, speed, delay, height)";
	Plat_UpByValueStayTx = "Plat_UpByValueStayTx(tag, speed, height)";
	Plat_UpNearestWaitDownStay = "Plat_UpNearestWaitDownStay(tag, speed, delay)";
	Plat_UpWaitDownStay = "Plat_UpWaitDownStay(tag, speed, delay)";
	PlayActorSound = "PlayActorSound(tid, sound, channel, volume, looping, attenuation)";
	Player_GiveItem = "Player_GiveItem(unknown parameters list)";
	Player_RemoveItem = "Player_RemoveItem(unknown parameters list)";
	Player_SetTeam = "Player_SetTeam(team)";
	PlayerArmorpoints = "PlayerArmorpoints()";
	PlayerClass = "PlayerClass(playernumber)";
	PlayerCount = "PlayerCount()";
	PlayerFrags = "PlayerFrags()";
	PlayerHealth = "PlayerHealth()";
	PlayerInGame = "PlayerInGame(playernumber)";
	PlayerIsBot = "PlayerIsBot(playernumber)";
	PlayerIsLoggedIn = "PlayerIsLoggedIn(playernumber)";
	PlayerIsSpectator = "PlayerIsSpectator(player)";
	PlayerNumber = "PlayerNumber()";
	PlayerTeam = "PlayerTeam()";
	PlayMovie = "PlayMovie(moviename)";
	PlaySound = "PlaySound(tid, sound, channel, volume, looping, attenuation, local)";
	Polyobj_DoorSlide = "Polyobj_DoorSlide(po, speed, angle, dist, delay)";
	Polyobj_DoorSwing = "Polyobj_DoorSwing(po, speed, angle, delay)";
	Polyobj_Move = "Polyobj_Move(po, speed, angle, dist)";
	Polyobj_MoveTimes8 = "Polyobj_MoveTimes8(po, speed, angle, dist)";
	Polyobj_MoveTo = "Polyobj_MoveTo(po, speed, pos_x, pos_y)";
	Polyobj_MoveToSpot = "Polyobj_MoveToSpot(po, speed, target)";
	Polyobj_OR_Move = "Polyobj_OR_Move(po, speed, angle, distance)";
	Polyobj_OR_MoveTimes8 = "Polyobj_OR_MoveTimes8(po, speed, angle, distance)";
	Polyobj_OR_MoveTo = "Polyobj_OR_MoveTo(po, speed, pos_x, pos_y)";
	Polyobj_OR_MoveToSpot = "Polyobj_OR_MoveToSpot(po, speed, target)";
	Polyobj_OR_RotateLeft = "Polyobj_OR_RotateLeft(po, speed, angle)";
	Polyobj_OR_RotateRight = "Polyobj_OR_RotateRight(po, speed, angle)";
	Polyobj_RotateLeft = "Polyobj_RotateLeft(po, speed, angle)";
	Polyobj_RotateRight = "Polyobj_RotateRight(po, speed, angle)";
	Polyobj_Stop = "Polyobj_Stop(po)";
	Polyobj_StopSound = "Polyobj_StopSound(po)";
	PolyWait = "PolyWait(polyid)";
	Print = "Print(type:expression)";
	PrintBold = "PrintBold(type:expression)";
	QuakeEx = "QuakeEx(tid, intensity_x, intensity_y, intensity_z, duration, damrad, tremrad, sfx, flags, mulwave_x, mulwave_y, mulwave_z, falloff, highpoint, rollintensity, rollwave, damagemultiplier, thrustmultiplier, damage)";
	Radius_Quake = "Radius_Quake(intensity, duration, damrad, tremrad, tid)";
	Radius_Quake2 = "Radius_Quake2(tid, intensity, duration, damrad, tremrad, sound)";
	Random = "Random(min, max)";
	RedCount = "RedCount()";
	RedReturn = "Script expression RedReturn";
	RedScore = "RedScore()";
	RedTeamCount = "RedTeamCount()";
	RedTeamScore = "RedTeamScore()";
	ReOpen = "Script expression ReOpen";
	ReplaceTextures = "ReplaceTextures(oldtexture, newtexture, flags)";
	RequestScriptPuke = "RequestScriptPuke(script, arg0, arg1, arg2, arg3)";
	ResetMap = "ResetMap()";
	Respawn = "Script expression Respawn";
	Restart = "Restart";
	Return = "Return";
	Round = "Round(value)";
	Script = "Script expression (Void)";
	ScriptCall = "ScriptCall(classname, funcname, args)";
	ScriptWait = "ScriptWait(script)";
	Scroll_Ceiling = "Scroll_Ceiling(tag, x-move, y-move, unused)";
	Scroll_Floor = "Scroll_Floor(tag, x-move, y-move, type)";
	Scroll_Texture_Both = "Scroll_Texture_Both(lineid, left, right, down, up)";
	Scroll_Wall = "Scroll_Wall(lineid, x, y, side, flags)";
	Sector_ChangeFlags = "Sector_ChangeFlags(tag, setflags, clearflags)";
	Sector_ChangeSound = "Sector_ChangeSound(tag, newsequence)";
	Sector_SetCeilingGlow = "Sector_SetCeilingGlow(tag, height, red, green, blue)";
	Sector_SetCeilingPanning = "Sector_SetCeilingPanning(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetCeilingScale = "Sector_SetCeilingScale(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetCeilingScale2 = "Sector_SetCeilingScale2(tag, u-fixed, v-fixed)";
	Sector_SetColor = "Sector_SetColor(tag, red, green, blue, desaturation)";
	Sector_SetCurrent = "Sector_SetCurrent(tag, amount, angle, useline)";
	Sector_SetDamage = "Sector_SetDamage(tag, amount, mod, interval, leaky)";
	Sector_SetFade = "Sector_SetFade(tag, red, green, blue)";
	Sector_SetFloorGlow = "Sector_SetFloorGlow(tag, height, red, green, blue)";
	Sector_SetFloorPanning = "Sector_SetFloorPanning(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetFloorScale = "Sector_SetFloorScale(tag, u-int, u-frac, v-int, v-frac)";
	Sector_SetFloorScale2 = "Sector_SetFloorScale2(tag, u-fixed, v-fixed)";
	Sector_SetFriction = "Sector_SetFriction(tag, amount)";
	Sector_SetGravity = "Sector_SetGravity(tag, ipart, fpart)";
	Sector_SetHealth = "Sector_SetHealth(tag, part, health)";
	Sector_SetLink = "Sector_SetLink(controltag, tag, surface, movetype)";
	Sector_SetPlaneReflection = "Sector_SetPlaneReflection(tag, floor, ceiling)";
	Sector_SetRotation = "Sector_SetRotation(tag, floor-angle, ceiling-angle)";
	Sector_SetTranslucent = "Sector_SetTranslucent(tag, plane, amount, type)";
	Sector_SetWind = "Sector_SetWind(tag, amount, angle, useline)";
	SectorDamage = "SectorDamage(tag, amount, type, protectionitem, flags)";
	SectorSound = "SectorSound(sound, volume)";
	SendToCommunicator = "SendToCommunicator(voc_id, front_only, indentify, nolog)";
	SetActivator = "SetActivator(tid, pointer_selector)";
	SetActivatorByNetID = "SetActivatorByNetID(netid, pointer)";
	SetActivatorToTarget = "SetActivatorToTarget(tid)";
	SetActorAngle = "SetActorAngle(tid, angle)";
	SetActorFlag = "SetActorFlag(tid, flagname, set)";
	SetActorPitch = "SetActorPitch(tid, pitch)";
	SetActorPosition = "SetActorPosition(tid, x, y, z, fog)";
	SetActorProperty = "SetActorProperty(tid, property, value)";
	SetActorRoll = "SetActorRoll(tid, angle)";
	SetActorState = "SetActorState(tid, state, exact)";
	SetActorTeleFog = "SetActorTeleFog(tid, sourcefog, destfog)";
	SetActorVelocity = "SetActorVelocity(tid, velx, vely, velz, add, setbob)";
	SetAirControl = "SetAirControl(amount)";
	SetAirSupply = "SetAirSupply(playernumber, tics)";
	SetAmmoCapacity = "SetAmmoCapacity(ammotype, maxamount)";
	SetCameraToTexture = "SetCameraToTexture(cameratid, texture, fov)";
	SetCeilingTrigger = "SetCeilingTrigger(tag, height, special, arg1, arg2, arg3, arg4, arg5)";
	SetCVar = "SetCVar(cvarname, newvalue)";
	SetCVarString = "SetCVarString(cvarname, newvalue)";
	SetDBEntry = "SetDBEntry(namespace, key, value)";
	SetDBEntryString = "SetDBEntryString(namespace, key, value)";
	SetFloorTrigger = "SetFloorTrigger(tag, height, special, arg1, arg2, arg3, arg4, arg5)";
	SetFogDensity = "SetFogDensity(tag, amount)";
	SetFont = "SetFont(font)";
	SetGlobalFogParameter = "SetGlobalFogParameter(property, value)";
	SetGravity = "SetGravity(amount)";
	SetHUDClipRect = "SetHUDClipRect(x, y, width, height, wrapwidth, aspectratio)";
	SetHudSize = "SetHudSize(width, height, statusbar)";
	SetHUDWrapWidth = "SetHUDWrapWidth(wrapwidth)";
	SetLineActivation = "SetLineActivation(lineid, activation, repeat)";
	SetLineBlocking = "SetLineBlocking(lineid, setting)";
	SetLineMonsterBlocking = "SetLineMonsterBlocking(lineid, setting)";
	SetLineSpecial = "SetLineSpecial(lineid, special, arg1, arg2, arg3, arg4, arg5)";
	SetLineTexture = "SetLineTexture(lineid, side, position, texture)";
	SetMarineSprite = "SetMarineSprite(tid, actorclass)";
	SetMarineWeapon = "SetMarineWeapon(tid, weapon)";
	SetMugShotState = "SetMugShotState(state)";
	SetMusic = "SetMusic(song, order, unused)";
	SetMusicVolume = "volume";
	SetPlayerLivesLeft = "SetPlayerLivesLeft(player, amount)";
	SetPlayerProperty = "SetPlayerProperty(who, set, which)";
	SetPointer = "SetPointer(assign_slot, tid, pointer_selector, flags)";
	SetResultValue = "SetResultValue(value)";
	SetSectorDamage = "SetSectorDamage(tag, amount, damagetype, interval, leaky)";
	SetSectorGlow = "SetSectorGlow(tag, which, red, green, blue, height)";
	SetSectorTerrain = "SetSectorTerrain(tag, whichplane, terraintype)";
	SetSkyScrollSpeed = "SetSkyScrollSpeed(skynumber, speed)";
	SetSubtitleNumber = "SetSubtitleNumber(num, sound)";
	SetThingSpecial = "SetThingSpecial(tid, special, arg1, arg2, arg3, arg4, arg5)";
	SetTranslation = "SetTranslation(tid, transname)";
	SetUserArray = "SetUserArray(tid, name, pos, value)";
	SetUserCVar = "SetUserCVar(playernum, cvarname, newvalue)";
	SetUserCVarString = "SetUserCVarString(playernum, cvarname, newvalue)";
	SetUserVariable = "SetUserVariable(tid, name, value)";
	SetWeapon = "SetWeapon(weapon)";
	sin = "sin(angle)";
	SinglePlayer = "SinglePlayer()";
	SortDBEntries = "SortDBEntries(namespace, limit, offset, order)";
	SoundSequence = "SoundSequence(sndseq)";
	SoundSequenceOnActor = "SoundSequenceOnActor(tid, sndseq)";
	SoundSequenceOnPolyObj = "SoundSequenceOnPolyObj(polyid, sndseq)";
	SoundSequenceOnSector = "SoundSequenceOnSector(tag, sndseq, location)";
	SoundVolume = "SoundVolume(tid, channel, volume)";
	Spawn = "Spawn(classname, x, y, z, newtid, angle)";
	SpawnDecal = "SpawnDecal(tid, decalname, flags, angle, zoffset, distance)";
	SpawnForced = "SpawnForced(classname, x, y, z, newtid, angle)";
	SpawnParticle = "SpawnParticle(color, fullbright, lifetime, size, x, y, z, velx, vely, velz, accelx, accely, accelz, startalpha, fadestep, endsize)";
	SpawnProjectile = "SpawnProjectile(tid, classname, angle, speed, vspeed, gravity, newtid)";
	SpawnSpot = "SpawnSpot(classname, spottid, newtid, angle)";
	SpawnSpotFacing = "SpawnSpotFacing(classname, spottid, newtid)";
	SpawnSpotFacingForced = "SpawnSpotFacingForced(classname, spottid, newtid)";
	SpawnSpotForced = "SpawnSpotForced(classname, spottid, newtid, angle)";
	Special = "Special";
	Sqrt = "Sqrt(number)";
	Stairs_BuildDown = "Stairs_BuildDown(tag, speed, height, delay, reset)";
	Stairs_BuildDownDoom = "Stairs_BuildDownDoom(tag, speed, height, delay, reset)";
	Stairs_BuildDownDoomSync = "Stairs_BuildDownDoomSync(tag, speed, height, reset)";
	Stairs_BuildDownSync = "Stairs_BuildDownSync(tag, speed, height, reset)";
	Stairs_BuildUp = "Stairs_BuildUp(tag, speed, height, delay, reset)";
	Stairs_BuildUpDoom = "Stairs_BuildUpDoom(tag, speed, height, delay, reset)";
	Stairs_BuildUpDoomCrush = "Stairs_BuildUpDoomCrush(tag, speed, height, delay, reset)";
	Stairs_BuildUpDoomSync = "Stairs_BuildUpDoomSync(tag, speed, height, reset)";
	Stairs_BuildUpSync = "Stairs_BuildUpSync(tag, speed, height, reset)";
	StartConversation = "StartConversation(talker_tid, facetalker)";
	StartSlideshow = "StartSlideshow(unknown parameter list)";
	StopSound = "StopSound(tid, channel)";
	Str = "Str expression";
	StrArg = "StrArg(unknown parameter list)";
	StrCaseCmp = "StrCaseCmp(string1, string2, maxcomparenum)";
	StrCmp = "StrCmp(string1, string2, maxcomparenum)";
	StrCpy = "StrCpy(a:destination, source, sourceindex)";
	Strftime = "Strftime(timestamp, format, utc)";
	StrIcmp = "StrIcmp(string1, string2, maxcomparenum)";
	StrLeft = "StrLeft(string, length)";
	StrLen = "StrLen(string)";
	StrMid = "StrMid(string, start, length)";
	StrParam = "StrParam(type:expression)";
	StrRight = "StrRight(string, length)";
	Suspend = "Suspend";
	SwapActorTeleFog = "SwapActorTeleFog(tid)";
	Switch = "Switch(expression)";
	SystemTime = "SystemTime()";
	TagWait = "TagWait(tag)";
	TakeActorInventory = "TakeActorInventory(tid, inventoryitem, amount)";
	TakeInventory = "TakeInventory(inventoryitem, amount)";
	Team_GivePoints = "Team_GivePoints(team, points, announce)";
	Team_Score = "Team_Score(points, nogrin)";
	Teleport = "Teleport(tid, tag, nosourcefog)";
	Teleport_EndGame = "Teleport_EndGame()";
	Teleport_NewMap = "Teleport_NewMap(map, pos, face)";
	Teleport_NoFog = "Teleport_NoFog(tid, useangle, tag)";
	Teleport_NoStop = "Teleport_NoStop(tid, tag, nofog)";
	Teleport_ZombieChanger = "Teleport_ZombieChanger(tid, tag)";
	TeleportGroup = "TeleportGroup(groupid, sourceid, destinationid, movesource, fog)";
	TeleportInSector = "TeleportInSector(tag, sourceid, destinationid, fog, groupid)";
	TeleportOther = "TeleportOther(tid, destinationid, fog)";
	Terminate = "Terminate";
	Thing_Activate = "Thing_Activate(tid)";
	Thing_ChangeTID = "Thing_ChangeTID(oldtid, newtid)";
	Thing_Damage = "Thing_Damage(tid, amount, mod)";
	Thing_Damage2 = "Thing_Damage2(tid, amount, damagetype)";
	Thing_Deactivate = "Thing_Deactivate(tid)";
	Thing_Destroy = "Thing_Destroy(tid, extreme, tag)";
	Thing_Hate = "Thing_Hate(hater, hatee, type)";
	Thing_Move = "Thing_Move(tid, destid, nofog)";
	Thing_Projectile = "Thing_Projectile(tid, type, angle, speed, vspeed)";
	Thing_Projectile2 = "Thing_Projectile2(tid, classname, angle, speed, vspeed, gravity, newtid)";
	Thing_ProjectileAimed = "Thing_ProjectileAimed(tid, type, speed, target, newtid)";
	Thing_ProjectileGravity = "Thing_ProjectileGravity(tid, type, angle, speed, vspeed)";
	Thing_ProjectileIntercept = "Thing_ProjectileIntercept(tid, type, speed, target, newtid)";
	Thing_Raise = "Thing_Raise(tid)";
	Thing_Remove = "Thing_Remove(tid)";
	Thing_SetConversation = "Thing_SetConversation(tid, conversationid)";
	Thing_SetGoal = "Thing_SetGoal(tid, goal, delay, dontchasetarget)";
	Thing_SetSpecial = "Thing_SetSpecial(tid, special, arg1, arg2, arg3)";
	Thing_SetTranslation = "Thing_SetTranslation(tid, translation)";
	Thing_Spawn = "Thing_Spawn(tid, type, angle, newtid)";
	Thing_SpawnFacing = "Thing_SpawnFacing(tid, type, nofog, newtid)";
	Thing_SpawnNoFog = "Thing_SpawnNoFog(tid, type, angle, newtid)";
	Thing_Stop = "Thing_Stop(tid)";
	ThingCount = "ThingCount(type, tid)";
	ThingCountName = "ThingCountName(classname, tid)";
	ThingCountNameSector = "ThingCountNameSector(classname, tid, tag)";
	ThingCountSector = "ThingCountSector(type, tid, tag)";
	ThingSound = "ThingSound(tid, sound, volume)";
	ThrustThing = "ThrustThing(angle, force, nolimit, tid)";
	ThrustThingZ = "ThrustThingZ(tid, speed, up_or_down, add_or_set)";
	Timer = "Timer()";
	TranslucentLine = "TranslucentLine(lineid, amount, additive, moreflags)";
	UniqueTID = "UniqueTID(tid, limit)";
	Unloading = "Script expression Unloading";
	UnMorphActor = "UnMorphActor(tid, force)";
	Until = "Until(expression)";
	UseActorInventory = "UseActorInventory(tid, inventoryitem)";
	UseInventory = "UseInventory(inventoryitem)";
	UsePuzzleItem = "UsePuzzleItem(item, script, arg1, arg2, arg3)";
	VectorAngle = "VectorAngle(x, y)";
	VectorLength = "VectorLength(x, y)";
	Void = "Void";
	Warp = "Warp(tid, xofs, yofs, zofs, angle, flags, success_state, exact, heightoffset, radiusoffset, pitch)";
	While = "While(expression)";
	WhiteReturn = "Script expression WhiteReturn";
	World = "World Int expression:identifier";
}

constants
{
	AAPTR_DEFAULT;
	AAPTR_FRIENDPLAYER;
	AAPTR_GET_LINETARGET;
	AAPTR_MASTER;
	AAPTR_NULL;
	AAPTR_PLAYER_GETCONVERSATION;
	AAPTR_PLAYER_GETTARGET;
	AAPTR_PLAYER1;
	AAPTR_PLAYER2;
	AAPTR_PLAYER3;
	AAPTR_PLAYER4;
	AAPTR_PLAYER5;
	AAPTR_PLAYER6;
	AAPTR_PLAYER7;
	AAPTR_PLAYER8;
	AAPTR_TARGET;
	AAPTR_TRACER;
	ACTOR_ALIVE;
	ACTOR_BOT;
	ACTOR_DEAD;
	ACTOR_GENERIC;
	ACTOR_MISSILE;
	ACTOR_MONSTER;
	ACTOR_NONE;
	ACTOR_PLAYER;
	ACTOR_VOODOODOLL;
	ACTOR_WORLD;
	AMLF_DontDraw;
	AMLF_Mapped;
	AMLF_Revealed;
	AMLF_Secret;
	AMLS_CeilingDiff;
	AMLS_Default;
	AMLS_ExtraFloor;
	AMLS_FloorDiff;
	AMLS_InterTeleport;
	AMLS_IntraTeleport;
	AMLS_Locked;
	AMLS_NotSeen;
	AMLS_OneSided;
	AMLS_Portal;
	AMLS_Secret;
	AMLS_Special;
	AMLS_TwoSided;
	AMLS_UnexploredSecret;
	APROP_Accuracy;
	APROP_ActiveSound;
	APROP_Alpha;
	APROP_Ambush;
	APROP_AttackSound;
	APROP_AttackZOffset;
	APROP_ChaseGoal;
	APROP_Damage;
	APROP_DamageFactor;
	APROP_DamageMultiplier;
	APROP_DamageType;
	APROP_DeathSound;
	APROP_Dormant;
	APROP_Dropped;
	APROP_Friction;
	APROP_Friendly;
	APROP_FriendlySeeBlocks;
	APROP_Frightened;
	APROP_Gravity;
	APROP_Health;
	APROP_Height;
	APROP_Invulnerable;
	APROP_JumpZ;
	APROP_Mass;
	APROP_MasterTID;
	APROP_MaxDropOffHeight;
	APROP_MaxStepHeight;
	APROP_MeleeRange;
	APROP_NameTag;
	APROP_NoTarget;
	APROP_NoTrigger;
	APROP_PainSound;
	APROP_Radius;
	APROP_Reactiontime;
	APROP_RenderStyle;
	APROP_ScaleX;
	APROP_ScaleY;
	APROP_Score;
	APROP_SeeSound;
	APROP_SoundClass;
	APROP_SpawnHealth;
	APROP_Species;
	APROP_Speed;
	APROP_Stamina;
	APROP_StencilColor;
	APROP_TargetTID;
	APROP_TracerTID;
	APROP_ViewHeight;
	APROP_WaterDepth;
	APROP_Waterlevel;
	ARMORINFO_ACTUALSAVEAMOUNT;
	ARMORINFO_CLASSNAME;
	ARMORINFO_MAXABSORB;
	ARMORINFO_MAXFULLABSORB;
	ARMORINFO_SAVEAMOUNT;
	ARMORINFO_SAVEPERCENT;
	ATTN_IDLE;
	ATTN_NONE;
	ATTN_NORM;
	ATTN_STATIC;
	BLOCK_CREATURES;
	BLOCK_EVERYTHING;
	BLOCK_NOTHING;
	BLOCK_PLAYERS;
	BLOCK_RAILING;
	BLOCKF_CREATURES;
	BLOCKF_EVERYTHING;
	BLOCKF_FLOATERS;
	BLOCKF_HITSCAN;
	BLOCKF_LANDMONSTERS;
	BLOCKF_MONSTERS;
	BLOCKF_PLAYERS;
	BLOCKF_PROJECTILES;
	BLOCKF_RAILING;
	BLOCKF_SIGHT;
	BLOCKF_SOUND;
	BLOCKF_USE;
	BT_ALTATTACK;
	BT_ATTACK;
	BT_BACK;
	BT_CROUCH;
	BT_FORWARD;
	BT_JUMP;
	BT_LEFT;
	BT_LOOKDOWN;
	BT_LOOKUP;
	BT_MOVEDOWN;
	BT_MOVELEFT;
	BT_MOVERIGHT;
	BT_MOVEUP;
	BT_RELOAD;
	BT_RIGHT;
	BT_RUN;
	BT_SHOWSCORES;
	BT_SPEED;
	BT_STRAFE;
	BT_TURN180;
	BT_USE;
	BT_USER1;
	BT_USER2;
	BT_USER3;
	BT_USER4;
	BT_ZOOM;
	CARRY;
	CHAN_5;
	CHAN_6;
	CHAN_7;
	CHAN_AUTO;
	CHAN_BODY;
	CHAN_ITEM;
	CHAN_LISTENERZ;
	CHAN_MAYBE_LOCAL;
	CHAN_NOPAUSE;
	CHAN_UI;
	CHAN_VOICE;
	CHAN_WEAPON;
	CHANGELEVEL_CHANGESKILL;
	CHANGELEVEL_KEEPFACING;
	CHANGELEVEL_NOINTERMISSION;
	CHANGELEVEL_NOMONSTERS;
	CHANGELEVEL_PRERAISEWEAPON;
	CHANGELEVEL_RESETHEALTH;
	CHANGELEVEL_RESETINVENTORY;
	CLASS_CLERIC;
	CLASS_FIGHTER;
	CLASS_MAGE;
	CPXF_ANCESTOR;
	CPXF_CHECKSIGHT;
	CPXF_CLOSEST;
	CPXF_COUNTDEAD;
	CPXF_DEADONLY;
	CPXF_EXACT;
	CPXF_FARTHEST;
	CPXF_LESSOREQUAL;
	CPXF_NOZ;
	CPXF_SETMASTER;
	CPXF_SETONPTR;
	CPXF_SETTARGET;
	CPXF_SETTRACER;
	CR_BLACK;
	CR_BLUE;
	CR_BRICK;
	CR_BROWN;
	CR_CREAM;
	CR_CYAN;
	CR_DARKBROWN;
	CR_DARKGRAY;
	CR_DARKGREEN;
	CR_DARKGREY;
	CR_DARKRED;
	CR_FIRE;
	CR_GOLD;
	CR_GRAY;
	CR_GREEN;
	CR_GREY;
	CR_ICE;
	CR_LIGHTBLUE;
	CR_OLIVE;
	CR_ORANGE;
	CR_PURPLE;
	CR_RED;
	CR_SAPPHIRE;
	CR_TAN;
	CR_TEAL;
	CR_UNTRANSLATED;
	CR_WHITE;
	CR_YELLOW;
	CSF_NOBLOCKALL;
	CSF_NOFAKEFLOORS;
	DAMAGE_IN_AIR;
	DAMAGE_NONPLAYERS;
	DAMAGE_NO_ARMOR;
	DAMAGE_PLAYERS;
	DAMAGE_SUBCLASSES_PROTECT;
	DB_ORDER_ASC;
	DB_ORDER_DESC;
	FALSE;
	FHF_NOIMPACTDECAL;
	FHF_NORANDOMPUFFZ;
	FOGP_DENSITY;
	FOGP_OUTSIDEDENSITY;
	FOGP_SKYFOG;
	GAME_NET_COOPERATIVE;
	GAME_NET_DEATHMATCH;
	GAME_SINGLE_PLAYER;
	GAME_TITLE_MAP;
	HUDMSG_ADDBLEND;
	HUDMSG_ALPHA;
	HUDMSG_COLORSTRING;
	HUDMSG_FADEINOUT;
	HUDMSG_FADEOUT;
	HUDMSG_LAYER_OVERHUD;
	HUDMSG_LAYER_OVERMAP;
	HUDMSG_LAYER_UNDERHUD;
	HUDMSG_LOG;
	HUDMSG_NOTWITH3DVIEW;
	HUDMSG_NOTWITHFULLMAP;
	HUDMSG_NOTWITHOVERLAYMAP;
	HUDMSG_NOWRAP;
	HUDMSG_PLAIN;
	HUDMSG_TYPEON;
	INPUT_BUTTONS;
	INPUT_FORWARDMOVE;
	INPUT_OLDBUTTONS;
	INPUT_PITCH;
	INPUT_ROLL;
	INPUT_SIDEMOVE;
	INPUT_UPMOVE;
	INPUT_YAW;
	IS_BOSSFIGHT;
	IS_COUNTDOWN;
	IS_FIRSTCOUNTDOWN;
	IS_INPROGRESS;
	IS_WAITINGFORPLAYERS;
	IS_WAVECOMPLETE;
	LEVELINFO_CLUSTERNUM;
	LEVELINFO_FOUND_ITEMS;
	LEVELINFO_FOUND_SECRETS;
	LEVELINFO_KILLED_MONSTERS;
	LEVELINFO_LEVELNUM;
	LEVELINFO_PAR_TIME;
	LEVELINFO_SUCK_TIME;
	LEVELINFO_TOTAL_ITEMS;
	LEVELINFO_TOTAL_MONSTERS;
	LEVELINFO_TOTAL_SECRETS;
	LINE_BACK;
	LINE_FRONT;
	MARINEWEAPON_BerserkFist;
	MARINEWEAPON_BFG;
	MARINEWEAPON_Chaingun;
	MARINEWEAPON_Chainsaw;
	MARINEWEAPON_Dummy;
	MARINEWEAPON_Fist;
	MARINEWEAPON_Pistol;
	MARINEWEAPON_PlasmaRifle;
	MARINEWEAPON_Railgun;
	MARINEWEAPON_RocketLauncher;
	MARINEWEAPON_Shotgun;
	MARINEWEAPON_SuperShotgun;
	MF_AMBUSH;
	MF_CORPSE;
	MF_COUNTITEM;
	MF_COUNTKILL;
	MF_DROPOFF;
	MF_DROPPED;
	MF_FLOAT;
	MF_FRIENDLY;
	MF_ICECORPSE;
	MF_INBOUNCE;
	MF_INCHASE;
	MF_INFLOAT;
	MF_JUSTATTACKED;
	MF_JUSTHIT;
	MF_MISSILE;
	MF_NOBLOCKMAP;
	MF_NOBLOOD;
	MF_NOCLIP;
	MF_NOGRAVITY;
	MF_NOLIFTDROP;
	MF_NOSECTOR;
	MF_NOTDMATCH;
	MF_PICKUP;
	MF_SHADOW;
	MF_SHOOTABLE;
	MF_SKULLFLY;
	MF_SOLID;
	MF_SPAWNCEILING;
	MF_SPAWNSOUNDSOURCE;
	MF_SPECIAL;
	MF_STEALTH;
	MF_TELEPORT;
	MF_UNMORPHED;
	ML_3DMIDTEX;
	ML_ADDTRANS;
	ML_BLOCK_FLOATERS;
	ML_BLOCK_PLAYERS;
	ML_BLOCKEVERYTHING;
	ML_BLOCKHITSCAN;
	ML_BLOCKING;
	ML_BLOCKMONSTERS;
	ML_BLOCKPROJECTILE;
	ML_BLOCKSIGHT;
	ML_BLOCKUSE;
	ML_CHECKSWITCHRANGE;
	ML_CLIP_MIDTEX;
	ML_DONTDRAW;
	ML_DONTPEGBOTTOM;
	ML_DONTPEGTOP;
	ML_FIRSTSIDEONLY;
	ML_MAPPED;
	ML_MONSTERSCANACTIVATE;
	ML_RAILING;
	ML_REPEAT_SPECIAL;
	ML_SECRET;
	ML_SOUNDBLOCK;
	ML_TWOSIDED;
	ML_WRAP_MIDTEX;
	ML_ZONEBOUNDARY;
	MOD_BARREL;
	MOD_BFG_BOOM;
	MOD_BFG_SPLASH;
	MOD_CHAINSAW;
	MOD_CRUSH;
	MOD_DISINTEGRATE;
	MOD_ELECTRIC;
	MOD_EXIT;
	MOD_FALLING;
	MOD_HIT;
	MOD_ICE;
	MOD_LAVA;
	MOD_PLASMARIFLE;
	MOD_POISON;
	MOD_R_SPLASH;
	MOD_RAILGUN;
	MOD_ROCKET;
	MOD_SLIME;
	MOD_SPLASH;
	MOD_SSHOTGUN;
	MOD_SUICIDE;
	MOD_TELEFRAG;
	MOD_UNKNOWN;
	MOD_WATER;
	MODINPUT_BUTTONS;
	MODINPUT_FORWARDMOVE;
	MODINPUT_OLDBUTTONS;
	MODINPUT_PITCH;
	MODINPUT_ROLL;
	MODINPUT_SIDEMOVE;
	MODINPUT_UPMOVE;
	MODINPUT_YAW;
	MOVIE_Failed;
	MOVIE_Played;
	MOVIE_Played_Aborted;
	MOVIE_Played_NoVideo;
	MRF_ADDSTAMINA;
	MRF_FAILNOLAUGH;
	MRF_FAILNOTELEFRAG;
	MRF_FULLHEALTH;
	MRF_LOSEACTUALWEAPON;
	MRF_NEWTIDBEHAVIOUR;
	MRF_OLDEFFECTS;
	MRF_TRANSFERTRANSLATION;
	MRF_UNDOALWAYS;
	MRF_UNDOBYCHAOSDEVICE;
	MRF_UNDOBYDEATH;
	MRF_UNDOBYDEATHFORCED;
	MRF_UNDOBYDEATHSAVES;
	MRF_UNDOBYTOMEOFPOWER;
	MRF_WHENINVULNERABLE;
	NO;
	NO_CHANGE;
	NO_TEAM;
	NOT_BOTTOM;
	NOT_CEILING;
	NOT_FLOOR;
	NOT_MIDDLE;
	NOT_TOP;
	OFF;
	ON;
	PICKAF_FORCETID;
	PICKAF_RETURNTID;
	PLAYERINFO_AIMDIST;
	PLAYERINFO_COLOR;
	PLAYERINFO_DESIREDFOV;
	PLAYERINFO_FOV;
	PLAYERINFO_FVIEWBOB;
	PLAYERINFO_GENDER;
	PLAYERINFO_MOVEBOB;
	PLAYERINFO_NEVERSWITCH;
	PLAYERINFO_PLAYERCLASS;
	PLAYERINFO_STILLBOB;
	PLAYERINFO_TEAM;
	PRINTNAME_LEVEL;
	PRINTNAME_LEVELNAME;
	PRINTNAME_NEXTLEVEL;
	PRINTNAME_NEXTSECRET;
	PRINTNAME_SKILL;
	PROP_ALLMAP;
	PROP_BUDDHA;
	PROP_BUDDHA2;
	PROP_FLIGHT;
	PROP_FLY;
	PROP_FRIGHTENING;
	PROP_FROZEN;
	PROP_GODMODE;
	PROP_GODMODE2;
	PROP_INFRARED;
	PROP_INSTANTWEAPONSWITCH;
	PROP_INVISIBILITY;
	PROP_INVULNERABILITY;
	PROP_NOCLIP;
	PROP_NOCLIP2;
	PROP_NOTARGET;
	PROP_RADIATIONSUIT;
	PROP_SPEED;
	PROP_STRENGTH;
	PROP_TOTALLYFROZEN;
	PROP_WEAPONLEVEL2;
	PTROP_NOSAFEGUARDS;
	PTROP_UNSAFEMASTER;
	PTROP_UNSAFETARGET;
	QF_3D;
	QF_AFFECTACTORS;
	QF_DAMAGEFALLOFF;
	QF_FULLINTENSITY;
	QF_GROUNDONLY;
	QF_MAX;
	QF_RELATIVE;
	QF_SCALEDOWN;
	QF_SCALEUP;
	QF_SHAKEONLY;
	QF_WAVE;
	SCROLL;
	SCROLL_AND_CARRY;
	SDF_ABSANGLE;
	SDF_FIXED_DISTANCE;
	SDF_FIXED_ZOFF;
	SDF_PERMANENT;
	SECF_DMGENDGODMODE;
	SECF_DMGENDLEVEL;
	SECF_DMGHAZARD;
	SECF_DMGTERRAINFX;
	SECF_FLOORDROP;
	SECF_FRICTION;
	SECF_NOFALLINGDAMAGE;
	SECF_NORESPAWN;
	SECF_PUSH;
	SECF_SILENT;
	SECF_SILENTMOVE;
	SECPART_3D;
	SECPART_Ceiling;
	SECPART_Floor;
	SECSEQ_CEILING;
	SECSEQ_FLOOR;
	SECSEQ_FULLHEIGHT;
	SECSEQ_INTERIOR;
	SIDE_BACK;
	SIDE_FRONT;
	SKILL_EASY;
	SKILL_HARD;
	SKILL_NORMAL;
	SKILL_VERY_EASY;
	SKILL_VERY_HARD;
	SOUND_Active;
	SOUND_Attack;
	SOUND_Bounce;
	SOUND_CrushPain;
	SOUND_Death;
	SOUND_Howl;
	SOUND_Pain;
	SOUND_See;
	SOUND_Use;
	SOUND_WallBounce;
	SPAC_AnyCross;
	SPAC_Cross;
	SPAC_Impact;
	SPAC_MCross;
	SPAC_MPush;
	SPAC_MUse;
	SPAC_None;
	SPAC_PCross;
	SPAC_Push;
	SPAC_Use;
	SPAC_UseBack;
	SPAC_UseThrough;
	STYLE_Add;
	STYLE_AddShaded;
	STYLE_AddStencil;
	STYLE_Fuzzy;
	STYLE_None;
	STYLE_Normal;
	STYLE_OptFuzzy;
	STYLE_Shaded;
	STYLE_Shadow;
	STYLE_SoulTrans;
	STYLE_Stencil;
	STYLE_Subtract;
	STYLE_Translucent;
	STYLE_TranslucentStencil;
	T_ABADDON;
	T_ABADDONSHOT;
	T_AMMOBOX;
	T_AMULETOFWARDING;
	T_ANTIGRAVBELT;
	T_ARACHNOTRON;
	T_ARACHNOTRONPLASMA;
	T_ARMORBONUS;
	T_ARROW;
	T_AXEKEY;
	T_BACKPACK;
	T_BARON;
	T_BARONBALL;
	T_BARREL;
	T_BATTERY;
	T_BEAST;
	T_BEASTBALL;
	T_BELPHEGOR;
	T_BERSERK;
	T_BFG;
	T_BFG10000;
	T_BFG10KSHOT;
	T_BFGSHOT;
	T_BISHOP;
	T_BLADE;
	T_BLASTER;
	T_BLOOD;
	T_BLOODDEMON;
	T_BLOODPOOL;
	T_BLOODPOOL1;
	T_BLOODPOOL2;
	T_BLUEARMOR;
	T_BLUEFLAG;
	T_BLUEKEY;
	T_BLUEKEYCARD;
	T_BLUESKULLKEY;
	T_BLUETELEGLITTER;
	T_BOUNCYMACEBALL;
	T_BRAINS;
	T_BRIDGE;
	T_CACODEMON;
	T_CACODEMONSHOT;
	T_CACOLANTERN;
	T_CACOLANTERNSHOT;
	T_CELL;
	T_CENTAUR;
	T_CENTAUR_MASH;
	T_CENTAURLEADER;
	T_CHAINGUN;
	T_CHAINGUY;
	T_CHAINSAW;
	T_CHICKEN;
	T_CLERICHOLY1;
	T_CLERICHOLY2;
	T_CLERICHOLY3;
	T_CLERICSTAFF;
	T_CLINK;
	T_CLIP;
	T_COMPUTERMAP;
	T_CROSSBOW;
	T_CROSSBOWMAINBLAST;
	T_CROSSBOWMINIBLAST;
	T_CROSSBOWPOWERBLAST;
	T_CYBERDEMON;
	T_DARKIMP;
	T_DARKIMPFIREBALL;
	T_DART;
	T_DEATHBALL;
	T_DEMON;
	T_DEMON_MASH;
	T_DEMON1;
	T_DEMON2_MASH;
	T_DIRT1;
	T_DIRT2;
	T_DIRT3;
	T_DIRT4;
	T_DIRT5;
	T_DIRT6;
	T_DOOMSPHERE;
	T_DRAGONSKINBRACERS;
	T_DRAIN;
	T_DSPARILALONE;
	T_DSPARILBLUESHOT;
	T_DSPARILONSERPENT;
	T_DSPARILTELEPORTDEST;
	T_DSPARILWIZARDSPAWNER;
	T_EMERALDKEY;
	T_ETTIN;
	T_ETTIN_MASH;
	T_FALCONSHIELD;
	T_FEATHER;
	T_FIGHTERAXE;
	T_FIGHTERHAMMER;
	T_FIGHTERSWORD1;
	T_FIGHTERSWORD2;
	T_FIGHTERSWORD3;
	T_FIREBALL1;
	T_FIREGARGOYLE;
	T_FIREKEY;
	T_FLAME_LARGE;
	T_FLAME_SMALL;
	T_FLAMINGBARREL;
	T_FLESH_DRIP1;
	T_FLESH_DRIP2;
	T_GAUNTLETS;
	T_GREENARMOR;
	T_GREENKEY;
	T_GRENADE;
	T_GRENADELAUNCHER;
	T_GUTS;
	T_HASTE;
	T_HEALTHBONUS;
	T_HEAVYMACEBALL;
	T_HECTEBUS;
	T_HEFTYBLASTERAMMO;
	T_HEFTYCROSSBOWAMMO;
	T_HEFTYMACEAMMO;
	T_HEFTYPHOENIXRODAMMO;
	T_HEFTYSKULLRODAMMO;
	T_HEFTYWANDAMMO;
	T_HELLKNIGHT;
	T_HIGHJUMP;
	T_HORNKEY;
	T_ICEGOLEM;
	T_ICESHARD;
	T_IMP;
	T_IMPFIREBALL;
	T_IMPLEADER;
	T_INFRAGOGGLES;
	T_INFRATRACKER;
	T_INVISIBILITY;
	T_INVULNERABILITY;
	T_IRONFEET;
	T_IRONLICH;
	T_IRONLICHBLUESHOT;
	T_ITEMALLMAP;
	T_ITEMBAGOFHOLDING;
	T_ITEMBOOSTMANA;
	T_ITEMBOOTS;
	T_ITEMEGG;
	T_ITEMFLECHETTE;
	T_ITEMFLIGHT;
	T_ITEMHEALTHFLASH;
	T_ITEMHEALTHFLASK;
	T_ITEMHEALTHFULL;
	T_ITEMHEALTHPOTION;
	T_ITEMINVISIBILITY;
	T_ITEMINVULNERABILITY;
	T_ITEMPORK;
	T_ITEMREPULSION;
	T_ITEMSUMMON;
	T_ITEMTELEPORT;
	T_ITEMTIMEBOMB;
	T_ITEMTOME;
	T_ITEMTORCH;
	T_ITEMTPORTOTHER;
	T_KNIGHT;
	T_KNIGHTAXE;
	T_KNIGHTBLOODAXE;
	T_KNIGHTGHOST;
	T_LIGHTAMP;
	T_LOSTSOUL;
	T_MACE;
	T_MACEKEY;
	T_MAGESHARDS;
	T_MAGESTAFF1;
	T_MAGESTAFF2;
	T_MAGESTAFF3;
	T_MANA1;
	T_MANA2;
	T_MANA3;
	T_MANCUBUS;
	T_MANCUBUSSHOT;
	T_MAXARMORBONUS;
	T_MAXHEALTHBONUS;
	T_MEDKIT;
	T_MEGASPHERE;
	T_MESHARMOR;
	T_METALKEY;
	T_MINIGUN;
	T_MORPHBLAST;
	T_MUMMY;
	T_MUMMYGHOST;
	T_MUMMYHEAD;
	T_MUMMYLEADER;
	T_MUMMYLEADERGHOST;
	T_NOGRAVITYMACEBALL;
	T_NONE;
	T_PAINELEMENTAL;
	T_PERMLARGEFLAME;
	T_PERMSMALLFLAME;
	T_PHOENIXROD;
	T_PHOENIXSHOT;
	T_PISTOL;
	T_PLASMABOLT;
	T_PLASMAGUN;
	T_PLATINUMHELM;
	T_POD;
	T_PODGENERATOR;
	T_POISONDART;
	T_POWERWANDBIGGERBLAST;
	T_POWERWANDMINIBLAST;
	T_PROSPERITY;
	T_PUFF;
	T_PUZZBOOK1;
	T_PUZZBOOK2;
	T_PUZZGEMBIG;
	T_PUZZGEMBLUE1;
	T_PUZZGEMBLUE2;
	T_PUZZGEMGREEN1;
	T_PUZZGEMGREEN2;
	T_PUZZGEMRED;
	T_PUZZSKULL;
	T_RAGE;
	T_RAILGUN;
	T_RANDOMPOWERUP;
	T_REDARMOR;
	T_REDFLAG;
	T_REDKEYCARD;
	T_REDSKULLKEY;
	T_REDTELEGLITTER;
	T_REFLECTION;
	T_REGENERATION;
	T_RESISTANCE;
	T_REVENANT;
	T_RIPPER;
	T_RIPPERBALL;
	T_ROCK1;
	T_ROCK2;
	T_ROCK3;
	T_ROCKET;
	T_ROCKETAMMO;
	T_ROCKETBOX;
	T_ROCKETLAUNCHER;
	T_RUSTYKEY;
	T_SCRIPTEDMARINE;
	T_SERPENTFIREBALL;
	T_SERPENTKEY;
	T_SHELLBOX;
	T_SHELLS;
	T_SHIELD1;
	T_SHIELD2;
	T_SHOTGUN;
	T_SHOTGUY;
	T_SILVERKEY;
	T_SKULLROD;
	T_SKULLRODBLAST;
	T_SMALLMETALKEY;
	T_SNAKE;
	T_SNAKEPROJECTILE;
	T_SNAKEPROJECTILEBIG;
	T_SOULSPHERE;
	T_SOUND_WATERFALL;
	T_SOUND_WIND;
	T_SPARK_DRIP;
	T_SPECTRE;
	T_SPIDERMASTERMIND;
	T_SPREAD;
	T_SSGGUY;
	T_STAINEDGLASS0;
	T_STAINEDGLASS1;
	T_STAINEDGLASS2;
	T_STAINEDGLASS3;
	T_STAINEDGLASS4;
	T_STAINEDGLASS5;
	T_STAINEDGLASS6;
	T_STAINEDGLASS7;
	T_STAINEDGLASS8;
	T_STAINEDGLASS9;
	T_STEALTHARACHNOTRON;
	T_STEALTHBARON;
	T_STEALTHCACODEMON;
	T_STEALTHCHAINGUY;
	T_STEALTHIMP;
	T_STEALTHKNIGHT;
	T_STEALTHMANCUBUS;
	T_STEALTHREVENANT;
	T_STEALTHSERGEANT;
	T_STEALTHSHOTGUY;
	T_STEALTHVILE;
	T_STEALTHZOMBIE;
	T_STIMPACK;
	T_STRENGTH;
	T_SUPERSHOTGUN;
	T_TEMPLARGEFLAME;
	T_TEMPSMALLFLAME;
	T_THRUSTSPIKEDOWN;
	T_THRUSTSPIKEUP;
	T_TIMEFREEZER;
	T_TINYVOLCANOBALL;
	T_TRACER;
	T_TRANSLUCENCY;
	T_TURBOSPHERE;
	T_VILE;
	T_VOLCANO;
	T_VOLCANOBALL;
	T_WATERDRIP;
	T_WATERLURKER;
	T_WATERLURKERLEADER;
	T_WHIRLWIND;
	T_WHITEFLAG;
	T_WIMPYBLASTERAMMO;
	T_WIMPYCROSSBOWAMMO;
	T_WIMPYMACEAMMO;
	T_WIMPYPHOENIXRODAMMO;
	T_WIMPYSKULLRODAMMO;
	T_WIMPYWANDAMMO;
	T_WIZARD;
	T_WIZARDSHOT;
	T_WOLFSS;
	T_WRAITH;
	T_WRAITHBURIED;
	T_YELLOWKEY;
	T_YELLOWKEYCARD;
	T_YELLOWSKULLKEY;
	T_ZOMBIE;
	TEAM_BLUE;
	TEAM_RED;
	TEXFLAG_ADDOFFSET;
	TEXFLAG_BOTTOM;
	TEXFLAG_MIDDLE;
	TEXFLAG_TOP;
	TEXTURE_BOTTOM;
	TEXTURE_MIDDLE;
	TEXTURE_TOP;
	TPROP_Assister;
	TPROP_Carrier;
	TPROP_DeathCount;
	TPROP_FragCount;
	TPROP_IsValid;
	TPROP_LoserTheme;
	TPROP_Name;
	TPROP_NumLivePlayers;
	TPROP_NumPlayers;
	TPROP_PlayerStartNum;
	TPROP_PointCount;
	TPROP_ReturnTics;
	TPROP_Score;
	TPROP_Spread;
	TPROP_TeamItem;
	TPROP_TextColor;
	TPROP_WinCount;
	TPROP_WinnerTheme;
	TRANSLATION_ICE;
	TRUE;
	WARPF_ABSOLUTEANGLE;
	WARPF_ABSOLUTEOFFSET;
	WARPF_ABSOLUTEPOSITION;
	WARPF_BOB;
	WARPF_COPYINTERPOLATION;
	WARPF_COPYPITCH;
	WARPF_COPYVELOCITY;
	WARPF_INTERPOLATE;
	WARPF_MOVEPTR;
	WARPF_NOCHECKPOSITION;
	WARPF_STOP;
	WARPF_TESTONLY;
	WARPF_TOFLOOR;
	WARPF_USECALLERANGLE;
	WARPF_USEPTR;
	WARPF_WARPINTERPOLATION;
	YES;
}
&lt;/pre&gt;
[[Category:ACS]][[Category:Tools]]</text>
    <sha1>q74nbpkm3i2a6auhjya3wh6ovgfuzgk</sha1>
  </revision>
</page>