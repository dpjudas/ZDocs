<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>Classes:Inventory</title>
  <ns>0</ns>
  <id>2730</id>
  <revision>
    <id>53243</id>
    <parentid>51472</parentid>
    <timestamp>2024-10-07T10:12:20Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <minor />
    <comment>/* Dynamic */</comment>
    <origin>53243</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="10932" sha1="9y5vog73yum4fnvznw4popik2lgovkx" xml:space="preserve">{{Actor|
| type = Internal
| name = Inventory
| class = Inventory
}}[[Classes]]: {{Class}} &amp;rarr; &lt;u&gt;Inventory&lt;/u&gt;&lt;br&gt;
{|
|&amp;ensp;&amp;rarr;{{Class|Ammo}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|Armor}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiBlastRadius}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiBoostArmor}}
|&amp;ensp;&amp;rarr;{{Class|ArtiDarkServant}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiHealingRadius}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiPoisonBag}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiTeleport}}
|&amp;ensp;&amp;rarr;{{Class|ArtiTeleportOther}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ArtiTimeBomb}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|BackpackItem}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|CustomInventory}}
|&amp;ensp;&amp;rarr;{{Class|DehackedPickup}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|DummyStrifeItem}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|FakeInventory}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|Health}}
|&amp;ensp;&amp;rarr;{{Class|HealthPickup}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|Key}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|MapRevealer}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|Powerup}}
|&amp;ensp;&amp;rarr;{{Class|PowerupGiver}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|PuzzleItem}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|QuestItem}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|ScoreItem}}
|&amp;ensp;&amp;rarr;{{Class|Weapon}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|WeaponGiver}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|WeaponHolder}}&lt;br&gt;&amp;ensp;&amp;rarr;{{Class|WeaponPiece}}
|}

== Using in [[ACS]] ==
Actors that inherit from an Inventory class can be used as a parameter for the following functions:
* [[CheckActorInventory]]
* [[CheckInventory]]
* [[CheckWeapon]]
* [[ClearActorInventory]]
* [[ClearInventory]]
* [[DropInventory]]
* [[DropItem]]
* [[GetMaxInventory]]
* [[GiveActorInventory]]
* [[GiveInventory]]
* [[SetWeapon]]
* [[TakeActorInventory]]
* [[TakeInventory]]
* [[UseActorInventory]]
* [[UseInventory]]

== Using in [[ZScript]] and [[DECORATE]] ==

&lt;u&gt;Inventory&lt;/u&gt; is the base class for all items that can be picked up or placed into the inventory by other means. This class itself has is never used directly; its only purpose is to be a base class for other items. Any item derived directly from Inventory will be a functional item but won't produce any effects by itself. Such items may be used as counters or status markers.

Inventory items are special actors that can be picked up and/or placed into a player's or monster's inventory.

To define an inventory item you have to inherit from one of the predefined inventory classes:

*[[Classes:Inventory|Inventory]] - used for items without special function
*[[Classes:PowerupGiver|PowerupGiver]] - used for pickups that give powerups to the user (either upon picking them up or upon using them from the inventory bar)
*[[Classes:Health|Health]] - used for items that immediately increase the player's health
*[[Classes:HealthPickup|HealthPickup]] - used for items that are placed in the inventory and give health when being used
*[[Classes:BasicArmorPickup|BasicArmorPickup]] - used for armor items
*[[Classes:BasicArmorBonus|BasicArmorBonus]] - used for items that increase the amount of armor
*[[Classes:Ammo|Ammo]] - used for ammunition items
*[[Classes:Weapon|Weapon]] - used for weapons
*[[Classes:Key|Key]] - used for keys
*[[Classes:PuzzleItem|PuzzleItem]] - used for Puzzle items.
*[[Classes:WeaponPiece|WeaponPiece]] - used for weapon pieces. These are used to create weapons that have to be put together from more than one item.
*[[Classes:MapRevealer|MapRevealer]] - used to give the player the automap
*[[Classes:Backpack|Backpack]] - used to increase the player's ammo carrying capacity.
*[[Classes:CustomInventory|CustomInventory]] - used to define items with simple DECORATE based behavior.
*[[Classes:FakeInventory|FakeInventory]] - used to replicate simple pickups like the ones defined with the old DECORATE definitions.

[[Category:DECORATE guides]]

{{:Inventory properties}}

(Further, some of the subclasses have their own additional properties.)

The &lt;u&gt;Inventory&lt;/u&gt; base class also defines some new flags:

{{:Inventory flags}}

To create items that automatically activate when being picked up, add the +'''INVENTORY.AUTOACTIVATE''' flag. Normally, in this case their amount is set to 0 (which still allows to pick them up).

== Methods ==
===Static===
*void '''[[PrintPickupMessage]]''' (bool localview, String str)
===Dynamic===
*bool, Actor '''[[CallTryPickup]]'''(Actor ''toucher'')
*void '''[[A_RestoreSpecialThing1]]'''()
:Makes a thing visible again and calls &lt;code&gt;DoRespawn()&lt;/code&gt;.
*void '''[[A_RestoreSpecialThing2]]'''()
:Sets the SPECIAL flag to true and resets the NOGRAVITY flag to false if it's false by default for the actor, then moves it to its Spawn state.
*void '''[[A_RestoreSpecialDoomThing]]'''()
:Like &lt;code&gt;A_RestoreSpecialThing2&lt;/code&gt;, but also plays '''misc/respawn''' and spawns teleport fog on top of the respawning actor.
*bool '''[[DoRespawn]]'''()
:Resets the item's position to its original spawn position. Returns &lt;code&gt;true&lt;/code&gt; if the respawn was successfull (by default always returns true).
*void '''[[BecomeItem]]'''()
:Lets this actor know that it's about to be placed in an inventory. This is called in &lt;code&gt;AttachToOwner&lt;/code&gt; right before using &lt;code&gt;AddInventory&lt;/code&gt; to place the item into the player's inventory.
*void '''[[BecomePickup]]'''()
:Lets this actor know it should wait to be picked up. Removes its &lt;code&gt;owner&lt;/code&gt; if it has one, and resets all of the values that are necessary for it to become a pickup. This is called in &lt;code&gt;CreateTossable()&lt;/code&gt; when the player is dropping an item from their inventory.
*void '''[[GiveQuestItem]]''' (Actor toucher)
:Gives the &lt;code&gt;toucher&lt;/code&gt; a quest item based on the value of this item's &lt;code&gt;GiveQuest&lt;/code&gt; property.
*protected bool '''[[GoAway]]'''()
:Returns true if you must create a copy of this item to give to the player or false if you can use this one instead. Used in &lt;code&gt;CreateCopy()&lt;/code&gt;.
*protected void '''[[GoAwayAndDie]]'''()
:Calls &lt;code&gt;GoAway()&lt;/code&gt;, and if that returns false, unlinks the item from the world and sets its state to HoldAndDestroy.
*clearscope Inventory '''[[NextInv]]'''() const
:Returns a pointer to the next item after this one in the list if the INVBAR flag is set; otherwise returns a pointer to self.
*clearscope Inventory '''[[PrevInv]]'''()
:Returns a pointer to the previous item after this one in the list if the INVBAR flag is set; otherwise returns a pointer to self.

===Virtual===
{{: Inventory virtual functions}}

== [[ZScript]] definition ==

ZScript definition of the Inventory class is very long and [https://github.com/coelckers/gzdoom/blob/master/wadsrc/static/zscript/actors/inventory/inventory.zs can be found on GZDoom GitHub repository].


== [[DECORATE]] definition ==
{{DecorateDefinitionNote}}
 ACTOR &lt;u&gt;Inventory&lt;/u&gt; native
 {
   {{Property|Inventory.Amount}} 1
   {{Property|Inventory.MaxAmount}} 1
   {{Property|Inventory.InterHubAmount}} 1
   {{Property|Inventory.UseSound}} "misc/invuse"
   {{Property|Inventory.PickupSound}} "misc/i_pkup"
   {{Property|Inventory.PickupMessage}} "$TXT_DEFAULTPICKUPMSG"
   
   action native [[A_BFGSound]]();
   action native [[A_CheckForReload]](int counter, state label, bool dontincrement = {{Const|false}});
   action native [[A_CheckReload]]();
   action native [[A_ClearReFire]]();
   action native [[A_CloseShotgun2]]();
   action native [[A_CustomPunch]](int damage, bool norandom = {{Const|false}}, int flags = {{Const|CPF_USEAMMO}},
                               class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", float range = 0, float lifesteal = 0,
                               int lifestealmax = 0, class&lt;BasicArmorBonus&gt; armorbonustype = "{{Class|ArmorBonus}}",
                               sound MeleeSound = "", sound MissSound = "");
   action native [[A_FireBFG]]();
   action native [[A_FireBullets]](float spread_xy, float spread_z, int numbullets, int damageperbullet,
                               class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", int flags = 1, float range = 0,
                               class&lt;Actor&gt; missile = "", float Spawnheight = 32, float Spawnofs_xy = 0);
   action native [[A_FireCGun]]();
   action native [[A_FireCustomMissile]](class&lt;Actor&gt; missiletype, float angle = 0, bool useammo = {{Const|true}},
                                     float spawnofs_xy = 0, float spawnheight = 0, int flags = 0,
                                     float pitch = 0);
   action native [[A_FireMissile]]();
   action native [[A_FireOldBFG]]();
   action native [[A_FirePistol]]();
   action native [[A_FirePlasma]]();
   action native [[A_FireRailgun]]();
   action native [[A_FireRailgunLeft]]();
   action native [[A_FireRailgunRight]]();
   action native [[A_FireShotgun]]();
   action native [[A_FireShotgun2]]();
   action native [[A_FireSTGrenade]](class&lt;Actor&gt; grenadetype = "{{Class|Grenade}}");
   action native [[A_GunFlash]](state flash = "", int flags = 0);
   action native [[A_JumpIfNoAmmo]](state label);
   action native [[A_Light]](int extralight);
   action native [[A_Light0]]();
   action native [[A_Light1]]();
   action native [[A_Light2]]();
   action native [[A_LightInverse]]();
   action native [[A_LoadShotgun2]]();
   action native [[A_Lower]]();
   action native [[A_OpenShotgun2]]();
   action native [[A_RailAttack]](int damage, int spawnofs_xy = 0, bool useammo = {{Const|true}}, color color1 = "",
                              color color2 = "", int flags = 0, float maxdiff = 0,
                              class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", float spread_xy = 0, float spread_z = 0,
                              float range = 0, int duration = 0, float sparsity = 1.0, float driftspeed = 1.0,
                              class&lt;Actor&gt; spawnclass = "none", float spawnofs_z = 0, int spiraloffset = 270,
                              int limit = 0);
   action native [[A_RailWait]]();
   action native [[A_Raise]]();
   action native [[A_ReFire]](state flash = "");
   action native [[A_ResetReloadCounter]]();
   action native [[A_RestoreSpecialDoomThing]]();
   action native [[A_RestoreSpecialPosition]]();
   action native [[A_RestoreSpecialThing1]]();
   action native [[A_RestoreSpecialThing2]]();
   action native [[A_Saw]](sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2,
                       class&lt;Actor&gt; pufftype = "{{Class|BulletPuff}}", int flags = 0, float range = 0,
                       float spread_xy = 2.8125, float spread_z = 0, float lifesteal = 0, int lifestealmax = 0,
                       class&lt;BasicArmorBonus&gt; armorbonustype = "{{Class|ArmorBonus}}");
   action native [[A_WeaponReady]](int flags = 0);
   
   States
   {
   HideDoomish:
     TNT1 A 1050
     TNT1 A 0 [[A_RestoreSpecialPosition]]
     TNT1 A 1 [[A_RestoreSpecialDoomThing]]
     Stop
   HideSpecial:
     ACLO E 1400
     ACLO A 0 [[A_RestoreSpecialPosition]]
     ACLO A 4 [[A_RestoreSpecialThing1]]
     ACLO BABCBCDC 4
     ACLO D 4 [[A_RestoreSpecialThing2]]
     Stop
   Held:
     TNT1 A -1
     Stop
   HoldAndDestroy:
     TNT1 A 1
     Stop
   }
 }

[[Category:ZScript]]
[[Category:Inventory]]</text>
    <sha1>9y5vog73yum4fnvznw4popik2lgovkx</sha1>
  </revision>
</page>