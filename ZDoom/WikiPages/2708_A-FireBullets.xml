<page xmlns="http://www.mediawiki.org/xml/export-0.11/">
  <title>A FireBullets</title>
  <ns>0</ns>
  <id>2708</id>
  <revision>
    <id>53826</id>
    <parentid>52188</parentid>
    <timestamp>2024-11-22T10:18:30Z</timestamp>
    <contributor>
      <username>Jekyll Grim Payne</username>
      <id>2175</id>
    </contributor>
    <origin>53826</origin>
    <model>wikitext</model>
    <format>text/x-wiki</format>
    <text bytes="9417" sha1="lst5b1wjq9hiae75s8swd9tijdyakgf" xml:space="preserve">{{DISPLAYTITLE:A_FireBullets}}
{{note|This function is for the '''{{class|Weapon}}''' class. For monster hitscan attacks see '''[[A_CustomBulletAttack]]'''.}}

'''[[Classes:StateProvider|StateProvider]]'''

{{c|action void '''A_FireBullets'''(double ''spread_xy'', double ''spread_z'', int ''numbullets'', int ''damageperbullet'', class&lt;Actor&gt; ''pufftype'' }}={{c| "BulletPuff", int ''flags'' }}={{c| 1, double ''range'' }}={{c| 0, class&lt;Actor&gt; ''missile'' }}={{c| null, double ''Spawnheight'' }}={{c| 32, double ''Spawnofs_xy'' }}={{c| 0)}}

== Usage ==
Defines a custom hitscan attack for weapons. You have to specify the horizontal and vertical spread, the amount of bullets and the damage per bullet. 

When successfully called, the function plays the weapon's {{c|{{Property|AttackSound}}}} sound, if present, on the ''weapon'' [[A_PlaySound#Sound slots|channel]] ({{c|{{const|CHAN_WEAPON}}}}) with normal attenuation.

'''Notes:'''
*This function utilizes {{property|Player.AttackZOffset}} for positioning the origin of the bullet. Use this to adjust the height where bullets come from on the player for accuracy.
*If the number of bullets is 1, by default it'll ignore the spread values if this is the first bullet fired. See below for more details.
*{{property|DamageType|Damage types}} cannot be defined in this function directly; they must be defined through a custom [[Puff|puff]] class.

== Parameters ==
*{{c|double '''spread_xy'''}}
:The random spread going right and left.
*{{c|double '''spread_z'''}}
:The random spread going up and down.
*{{c|int '''numbullets'''}}
:The number of "bullets" (hitscan rays) this function fires. Note, there are several rules applied here depending on the value of this field:
:*&lt;code&gt;0&lt;/code&gt;: fires one bullet, always with perfect accuracy, ignoring the spread values.
:*&lt;code&gt;1&lt;/code&gt;: If this is the first bullet fired from the weapon ([[A_ReFire]] hasn't been called yet; the &lt;code&gt;refire&lt;/code&gt; field in the [[Structs:PlayerInfo|PlayerInfo struct]] will be 0), the bullet is fired with perfect accuracy. After [[A_ReFire]] has been called once, the bullet will be subjected to regular spread until the player lets go of the attack button and &lt;code&gt;player.refire&lt;/code&gt; resets back to 0. (This is why the first shot from Doom's {{class|Pistol}} and {{class|Chaingun}} is perfectly accurate.)
:*More than &lt;code&gt;1&lt;/code&gt;: when multiple bullets are fired, spread is always applied.
:*&lt;code&gt;-1&lt;/code&gt;: fires one bullet, but the spread is always applied, even if it's the first bullet. Using smaller values, like -2, -3 and so on, is also possible, but the effect will be the same as using positive values, since multiple bullets are always fired with a spread.
*{{c|int '''damageperbullet'''}}
:The amount of damage to deal ''per bullet''. Damage is multiplied by {{c|random(1, 3)}} (unless the {{c|FBF_NORANDOM}} flag is used).
*{{c|class&lt;Actor&gt; '''pufftype'''}}
:The [[puff]] to spawn at the point of impact. Default is '{{Class|BulletPuff}}'.
*{{c|EFireBulletsFlags '''flags'''}}
:Flags that modify the behavior of the function. (Multiple flags can be combined with &lt;code&gt;|&lt;/code&gt;.) Flags used by this function are defined in the {{c|EFireBulletsFlags}} enum. Possible flags:
:*{{c|FBF_USEAMMO}} — If set, the attack uses ammo. This flag is set by default if the flags parameter. Passing {{c|0}} as the flags argument (or passing other flags without adding this one) will disable it.
:*{{c|FBF_EXPLICITANGLE}} — If set, the horizontal and vertical spread are used as explicitly stated, instead of being used as a range for random spread.
:*{{c|FBF_NOFLASH}} — If set, the attack does not cause a weapon flash.
:*{{c|FBF_NOPITCH}} — If set, the vertical angle is not adjusted to aim at the target.
:*{{c|FBF_NORANDOM}} — If set, the damage is not multiplied by 1d3.
:*{{c|FBF_NORANDOMPUFFZ}} — If set, the random z offset given to the puff when spawned is disabled.
:*{{c|FBF_PUFFTARGET}} — Only works when &lt;code&gt;missile&lt;/code&gt; is used. Sets the puff as the missile's target.
:*{{c|FBF_PUFFMASTER}} — Only works when &lt;code&gt;missile&lt;/code&gt; is used. Sets the puff as the missile's master.
:*{{c|FBF_PUFFTRACER}} — Only works when &lt;code&gt;missile&lt;/code&gt; is used. Sets the puff as the missile's tracer.
:'''NOTE''': The pointer flags will not work if the puff does not exist, for example if the attack hits a bleeding actor, and [[Blood]] is spawned instead. Puffs can be forced to always spawn with {{flag|ALWAYSPUFF}} and {{flag|PUFFONACTORS}} flags (which requires a custom puff actor).
*{{c|double '''range'''}}
:The maximum distance the bullets can hit something. The default value of 0 is interpreted as the {{c|PLAYERMISSILERANGE}} constant, which is equal to 8192.
*{{c|class&lt;Actor&gt; '''missile'''}}
:The projectile actor class to spawn. This actor faces the point of hitscan impact and travels directly towards it. Spawning a missile does not consume extra ammo. Default is {{c|null}} (no projectile is spawned).
*{{c|double '''spawnheight'''}}
:Offsets how high up from the base of the player the ''missile'' spawns. Default is 32.
*{{c|double '''spawnofs_xy'''}}
:Offsets how far to the calling actor's right to spawn the ''missile'' from (assuming one is viewing the actor from behind). Negative values spawn it to the left. Default is 0.

== Examples ==

[[ZScript]]:
 Fire:
      TRIF A 5 Bright '''A_FireBullets'''(0, 0, 1, 45, "RiflePuff", {{const|FBF_USEAMMO}}{{!}}{{const|FBF_NORANDOM}});
      TRIF B 5 Bright;
      TRIG A 10;
      TRIG B 0 [[A_ReFire]];
      Goto Ready;

[[DECORATE]] {{deprecated}}:
 Fire:
      TRIF A 5 Bright '''A_FireBullets'''(0, 0, 1, 45, "RiflePuff", {{const|FBF_USEAMMO}}{{!}}{{const|FBF_NORANDOM}})
      TRIF B 5 Bright
      TRIG A 10
      TRIG B 0 [[A_ReFire]]
      Goto Ready

== [[ZScript]] definition ==
{{ZScriptDefinitionNote|actors/inventory/stateprovider.zs#L80}}
&lt;syntaxhighlight lang="csharp"&gt;
	action void A_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class&lt;Actor&gt; pufftype = "BulletPuff", int flags = 1, double range = 0, class&lt;Actor&gt; missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		let player = player;
		if (!player) return;

		let pawn = PlayerPawn(self);
		let weapon = player.ReadyWeapon;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags &amp; FBF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;
		FTranslatedLineTarget t;

		if ((flags &amp; FBF_USEAMMO) &amp;&amp; weapon &amp;&amp;  stateinfo != null &amp;&amp; stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}
		
		if (range == 0)	range = PLAYERMISSILERANGE;

		if (!(flags &amp; FBF_NOFLASH)) pawn.PlayAttacking2 ();

		if (!(flags &amp; FBF_NOPITCH)) bslope = BulletSlope();
		bangle = Angle;

		if (pufftype == NULL) pufftype = 'BulletPuff';

		if (weapon != NULL)
		{
			A_StartSound(weapon.AttackSound, CHAN_WEAPON);
		}

		if ((numbullets == 1 &amp;&amp; !player.refire) || numbullets == 0)
		{
			int damage = damageperbullet;

			if (!(flags &amp; FBF_NORANDOM))
				damage *= random[cabullet](1, 3);

			let puff = LineAttack(bangle, range, bslope, damage, 'Hitscan', pufftype, laflags, t);

			if (missile != null)
			{
				bool temp = false;
				double ang = Angle - 90;
				Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
				Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
				if (proj)
				{
					if (!puff)
					{
						temp = true;
						puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
					}
					AimBulletMissile(proj, puff, flags, temp, false);
					if (t.unlinked)
					{
						// Arbitary portals will make angle and pitch calculations unreliable.
						// So use the angle and pitch we passed instead.
						proj.Angle = bangle;
						proj.Pitch = bslope;
						proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
					}
				}
			}
		}
		else 
		{
			if (numbullets &lt; 0)
				numbullets = 1;
			for (i = 0; i &lt; numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags &amp; FBF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cabullet]() / 255.;
					slope += spread_z * Random2[cabullet]() / 255.;
				}

				int damage = damageperbullet;

				if (!(flags &amp; FBF_NORANDOM))
					damage *= random[cabullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags, t);

				if (missile != null)
				{
					bool temp = false;
					double ang = Angle - 90;
					Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
					Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
					if (proj)
					{
						if (!puff)
						{
							temp = true;
							puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
						}
						AimBulletMissile(proj, puff, flags, temp, false);
						if (t.unlinked)
						{
							// Arbitary portals will make angle and pitch calculations unreliable.
							// So use the angle and pitch we passed instead.
							proj.Angle = bangle;
							proj.Pitch = bslope;
							proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
						}
					}
				}
			}
		}
	}&lt;/syntaxhighlight&gt;

[[Category:ZScript]]
[[Category:DECORATE]]
[[category:Decorate Weapon attack functions|FireBullets]]
[[Category:StateProvider]]</text>
    <sha1>lst5b1wjq9hiae75s8swd9tijdyakgf</sha1>
  </revision>
</page>